{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>Hello there! </p> <p>Welcome to my portfolio page, which is a static website created using markdown. It was generated with MkDocs and is currently being hosted on github pages.  </p> <p>My name is Emmanuel Taiwo, I am a technical writer, also training to become a DevOps engineer. I have a passion for technology, specifically the cloud, and I love to share my knowledge and experiences. </p>"},{"location":"#skills","title":"Skills","text":"<p>Below is a list of my technical skills: </p> <ul> <li>AWS</li> <li>Docker</li> <li>Kubernetes</li> <li>Golang</li> <li>Ansible</li> <li>Podman</li> <li>Markdown &amp; Mkdocs  </li> <li>Technical Writing  </li> <li>Vagrant</li> <li>Git &amp; Github</li> <li>Linux CLI</li> </ul>"},{"location":"#contact-me","title":"Contact me","text":"<p>Twitter  marnuel.et@gmail.com</p>"},{"location":"#my-qualifications","title":"My Qualifications","text":"<p>GitHub </p>"},{"location":"date-calculator/","title":"How To Create a Date Calculator with the Linux <code>date</code> Command in a Shell Script","text":""},{"location":"date-calculator/#introduction","title":"Introduction","text":"<p>The <code>date</code> command is a command line utility that displays the computer's current date and time. It is included in the GNU Core Utilities and is therefore present in all Linux operating systems. While the <code>date</code> command is most commonly used to simply display the current datetime (date and time) in the terminal, it is capable of so much more. The <code>date</code> command allows you to format its output in different ways, set the system's datetime, and even integrate time calculations within shell scripts.</p> <p>In this tutorial, you will use the <code>date</code> command in a shell script to build a versatile date calculator. You will craft a script that accepts two datetimes as input, then performs a series of operations on them to extract valuable information. Imagine calculating the precise difference between two dates, down to the very second.</p> <p>By the end of this guide, you will gain a profound understanding of the <code>date</code> command and its capabilities. You will be equipped with the necessary skills to conquer date-related calculations. Also, your ability to write and work with shell scripts will see improvements.</p>"},{"location":"date-calculator/#prerequisites","title":"Prerequisites","text":"<p>To complete this tutorial, you will need:</p> <ul> <li> <p>Familiarity with using the  terminal.</p> </li> <li> <p>A basic understanding of shell scripting, you can follow the guide How To Write a Simple Shell Script on a VPS.</p> </li> <li>Some familiarity with if-else statements in shell scripting. If you\u2019d like an introduction or a refresher, you can visit the How to Use if-else in Shell Scripts? tutorial.</li> </ul>"},{"location":"date-calculator/#basic-usage-of-the-date-command","title":"Basic Usage of the Date Command","text":"<p>To access the <code>date</code> command, type the word into your terminal environment and execute.</p> <pre><code>date\n</code></pre> <p>The <code>date</code> command will display the current date and time in a standard format.</p> <pre><code>Thu Apr  6 11:23:31 EST 2024\n</code></pre> <p>The output shows that the current date is Thursday, April 6th, 2024 and the time is 11:23 am The time zone is also displayed, EST (Eastern Standard Time). The <code>date</code> command has many options and formats that are used to customize its output. In the succeeding sections, you will see how they work.</p>"},{"location":"date-calculator/#options","title":"Options","text":"<p>The <code>date</code> command's options are used to specify the behavior of the <code>date</code> command. For example, the <code>-u</code> option is used to display the date and time in UTC (Coordinated Universal Time) instead of the local time zone.</p> <pre><code>date -u\n</code></pre> <p>This returns the following output:</p> <pre><code>Thu Apr  6 16:40:49 UTC 2024\n</code></pre> <p>Another option is <code>-d</code>. This displays the date and time as described by an attached string. Execute the following command to see how it works:</p> <pre><code>date -d \"2 days ago\"\n</code></pre> <p>The command's output will then be displayed on the screen:</p> <pre><code>Tue Apr  4 11:41:24 EST 2024\n</code></pre> <p>You will observe that the printed date is exactly two days before the earlier printed current date. The <code>-d</code> option is not case-sensitive. Here are some more examples of strings that you can parse with <code>-d</code>:</p> <ul> <li> <p>yesterday</p> </li> <li> <p>tomorrow</p> </li> <li> <p>1 week ago</p> </li> <li> <p>Friday</p> </li> <li> <p>12 dec 2018</p> </li> <li> <p>4 July 2022 6:00pm</p> </li> <li> <p>1 apr 2019 13:14:20</p> </li> </ul> <p>Note: <code>--date=STRING</code> is another way to use the <code>-d</code> option. It is its longer form.</p>"},{"location":"date-calculator/#formats","title":"Formats","text":"<p>Formats are used to control the generated output of the <code>date</code> command to get specific information. For example, the <code>%y</code> format will print the last two digits of the current year. See below:</p> <pre><code>date +%y\n</code></pre> <p>Formats are represented by a percentage sign (<code>%</code>) followed by a letter of the English alphabet. When typing the <code>date</code> command alongside a format, you have to include a plus sign (<code>+</code>) before the format, otherwise, your format will not be recognized.</p> <p>The output of the above command will then be:</p> <pre><code>24\n</code></pre> <p>You can also work with multiple formats at once. To print the current date in the form YYYY-MM-DD, execute the following command:</p> <pre><code>date +%Y-%m-%d\n</code></pre> <p>You will see an output similar to this:</p> <pre><code>2024-04-06\n</code></pre> <p>The <code>%Y</code> format is different from <code>%y</code> in that the former prints out the four digits of the year, while the latter prints out only the last two digits. The <code>%m</code> format prints out the number of the month, between 1-12. Finally, the <code>%d</code> format prints out the number of the day of the month between 1-31. You can use these formats individually or combine them as we've seen. The dash (-) separates the figures and can be replaced by a backslash(<code>/</code>) or colon(<code>:</code>).</p> <p>To see a complete list of the options and formats of the <code>date</code> command, you can use the <code>--help</code> flag like this:</p> <pre><code>date --help\n</code></pre> <p>You can use these options and formats to customize the output of the <code>date</code> command to suit your needs. In the following sections as you build your date calculator, you will combine several of these options and formats to get desired results.</p>"},{"location":"date-calculator/#step-1-creating-a-script","title":"Step 1 \u2014 Creating a Script","text":"<p>Navigate to your working directory and create a new script with the following command:</p> <pre><code>nano date-calculator.sh\n</code></pre> <p>In the first line of your newly-created script, enter in the following:</p> <pre><code>#!/bin/sh\n</code></pre> <p>This ensures the program loader recognizes the file as a shell script and will run the commands contained within it. Save with <code>CTRL+O</code> and exit the text editor with <code>CTRL+X</code>.</p> <p>Now make the script executable with the following command:</p> <pre><code>chmod +x date-calculator.sh\n</code></pre> <p>With that out of the way, you can now get into the nitty-gritty of building your date-calculator shell script. In the next step, you will begin typing the commands to accept the input dates in your shell script.</p>"},{"location":"date-calculator/#step-2-writing-the-commands-to-take-in-date-values","title":"Step 2 \u2014 Writing the Commands to Take In Date Values","text":"<p>Your script will need to take in the dates (and times) that it will perform operations on. Open your script with the following command:</p> <pre><code>nano date-calculator.sh\n</code></pre> <p>Now enter these lines into your script:</p> <pre><code># To take in date values\n\necho \"Enter the first date: \"\nread -r first_date\necho \"Enter the second date: \"\nread -r second_date\n</code></pre> <p>Adding comments to your script makes it easier to read and helps you understand at a quick glance what each set of commands do. There are several such comments you will include in different sections as you write your shell script.</p> <p>The <code>read</code> command lets your shell script read lines from standard input (stdin) and stores them as strings in the specified variables, which are <code>first_date</code> and <code>second_date</code> in this case.</p> <p>The <code>-r</code> flag prevents the <code>read</code> command from mangling backslashes.</p> <p>The date values accepted in by your script will be in the form of strings. Throughout the rest of this tutorial, you will reference the variables(<code>first_date</code> &amp; <code>second_date</code>) containing these date values so that date operations can then be performed on them.</p>"},{"location":"date-calculator/#step-3-turning-the-date-strings-into-standard-format","title":"Step 3 \u2014 Turning the Date Strings Into Standard Format","text":"<p>The first operation your script will perform on the date values is to convert them from strings to a clear format. This format is the <code>yyyy-mm-dd HH:MM:SS</code> format. Enter the following lines into your script:</p> <pre><code># To convert the date strings into standard format\n\nfirst_dt=$(date -d \"$first_date\" +\"%Y-%m-%d %H:%M:%S\")\nsecond_dt=$(date -d \"$second_date\" +\"%Y-%m-%d %H:%M:%S\")\n</code></pre> <p>You do not want the operations to be performed on the current date, so you'll have to use the <code>-d</code> option to specify the desired dates. In this case, these are the dates contained within the variables <code>first_date</code> and <code>second_date</code>. To specify the format of the output, you enter the plus sign (+) followed by the desired format keys.</p> <p>The results are stored within two new variables <code>first_dt</code> and <code>second_dt</code>. Next, you will enter <code>echo</code> commands to print out the formatted dates. See below:</p> <pre><code>echo \"\\nStandard format for the first date: $first_dt\"\necho \"Standard format for the second date: $second_dt\\n\"\n</code></pre> <p>Note: The <code>\\n</code> sequence is used to print a new line. It is important to include this in your script so all your outputs don't end up clumped together on a single line when you execute your script at the end of this tutorial. It will appear in multiple places throughout this guide.</p> <p>Now, the date strings will be turned into a clear format and printed out on the screen. Here is an example of what the output would look like:</p> <pre><code>Standard format for the first date: 2020-11-23 05:30:15\nStandard format for the second date: 2023-03-16 10:15:30\n...\n</code></pre> <p>Next, you will perform the operations to obtain information about the date values.</p>"},{"location":"date-calculator/#step-4-generating-the-dates-day-of-the-week-and-week-of-the-year","title":"Step 4 \u2014 Generating the Dates\u2019 Day-Of-The-Week and Week-Of-The-Year","text":"<p>To obtain more information that is not immediately apparent about the date values that are accepted as input, there are specific date formats you can use. In this section, you will write commands to determine the day of the week(the weekday) and the week of the year of each date.</p>"},{"location":"date-calculator/#determining-the-day-of-the-week","title":"Determining the Day of the Week","text":"<p>The date format that prints the day of the week (Monday-Sunday) is <code>%A</code>. Now, to find the weekday of our chosen dates, enter the following into your script:</p> <pre><code># To determine the day of the week\n\nfirst_weekday=$(date -d \"$first_date\" +%A)\nsecond_weekday=$(date -d \"$second_date\" +%A)\n</code></pre> <p>Recall, the <code>-d</code> option lets you specify your desired date. The results of the operations performed in the preceding code block are stored in two new variables <code>first_weekday</code> and <code>second_weekday</code>. </p> <p>Enter the following code into your script so the results may be printed out upon execution:</p> <pre><code>echo \"First date's weekday: $first_weekday\"\necho \"Second date's weekday: $second_weekday\\n\"\n</code></pre> <p>Depending on the date values, your final result for this operation when you run your script will look like this:</p> <pre><code>...\nFirst date's weekday: Tuesday\nSecond date's weekday: Friday\n...\n</code></pre>"},{"location":"date-calculator/#determining-the-week-of-the-year","title":"Determining the Week of the Year","text":"<p>There are about 52 weeks in a year. To find the week when the dates occur,  there is a format present that carries out this function. This is the <code>%V</code> format. To perform this operation, enter the following into your script:</p> <pre><code># To determine the week of the year\n\nweek_number1=$(date -d \"$first_date\" +%V)\nweek_number2=$(date -d \"$second_date\" +%V)\n</code></pre> <p>Again, you will store the results into new variables (<code>week_number1</code> &amp; <code>week_number2</code>), then you will use these variables when entering the commands to print out the final result.</p> <pre><code>echo \"Week of the first date: $week_number1\"\necho \"Week of the second date: $week_number2\\n\"\n</code></pre> <p>The number that will be printed for each date will be between 1-52. The output will look like this:</p> <pre><code>...\nWeek of the first date: 12\nWeek of the second date: 44\n...\n</code></pre> <p>Next, you will use the date values in conditional statements to extract even more interesting information about them.</p>"},{"location":"date-calculator/#step-5-determining-if-the-dates-are-before-noon","title":"Step 5 \u2014 Determining if the Dates Are Before Noon","text":"<p>To determine if the time associated with your dates occur before noon of that day, i.e before 12:00, you will need an if-else statement. </p> <p>First, you need to extract the digits necessary for this operation from the accepted date strings. These are specifically the digits of the hours and minutes, <code>HH:MM</code>. Enter the following into your script:</p> <pre><code># To determine if the dates are before noon\n\ntime_one=$(date -d \"$first_date\" +\"%H%M\")\ntime_two=$(date -d \"$second_date\" +\"%H%M\")\n</code></pre> <p>The values are assigned to two new variables, <code>time_one</code> &amp; <code>time_two</code>. These are the variables that will be used in the if-else statement. </p> <p>Notice that there is no separator between the formats for hours(<code>%H</code>) and minutes(<code>%M</code>). This is so that it is possible to take them as whole numbers to compare against 12:00 which will be represented by <code>1200</code>. Enter the following lines into your script to see how it works:</p> <pre><code>if [ \"$time_one\" -lt 1200 ]; then\n    echo \"The time is before noon.\"\nelse\n    echo \"The time is after noon.\"\nfi\n\nif [ \"$time_two\" -lt 1200 ]; then\n    echo \"The time is before noon.\\n\"\nelse\n    echo \"The time is after noon.\\n\"\nfi\n</code></pre> <p>If the first date has a time that is 05:12. Then the <code>time_one</code> variable will be 0512. This is then compared against 12:00 which is represented as 1200. The value 0512 is lower than 1200 so the statement \"The time is before noon.\" will be printed to output. This maps nicely to the fact that the time 05:12 is in fact before 12:00, so your if-else conditional statement works accurately for its intended purpose, deterimining if the time in your date value comes before or after noon.</p> <p>Next, you will perform an even more complex if-else operation on the date values.</p>"},{"location":"date-calculator/#step-6-calculating-the-difference-between-the-dates-in-a-human-readable-format","title":"Step 6 \u2014 Calculating the Difference Between the Dates in a Human-Readable Format","text":"<p>To find the difference in time between your two original date values in a readable format, you will need to first find the difference in seconds. </p> <p>The <code>%s</code> format lets you convert a given date to the number of seconds that have passed since the Unix epoch (<code>January 01, 1970, 00:00:00 UTC</code>) up until that date.</p> <p>To find the difference between the dates in seconds, enter the following lines into your script:</p> <pre><code># To calculate the difference in seconds\n\nfdate_seconds=$(date --date=\"$first_date\" +%s)\nsdate_seconds=$(date --date=\"$second_date\" +%s)\n\nnum=$(( sdate_seconds - fdate_seconds ))\n</code></pre> <p>The date values are converted into seconds since Unix epoch and are stored in two new variables <code>fdate_seconds</code> &amp; <code>sdate_seconds</code>. The difference is then calculated and stored in a new variable, <code>num</code>.</p> <p>Now that you have the difference in seconds contained inside <code>num</code>, you will write if-else statements to perform arithmetic operations to convert it from mere seconds into a format denoting days, hours, minutes and then seconds. This is a sample of the target output we are trying to generate:</p> <pre><code>84d 14h 6m 32s between Jan 12 2024 8pm and yesterday.\n</code></pre> <p>Prior to starting these operations, declare your variables and equate them to a default value of zero, like this:</p> <pre><code># Declaring variables\nsec=0\nmin=0\nhour=0\nday=0\n</code></pre> <p>You may now begin the arithmetic operations.</p>"},{"location":"date-calculator/#if-else-statement-to-determine-seconds","title":"If-Else Statement to Determine Seconds","text":"<p>You will first write an if-else statement that performs modulo and division operations to determine the final value for seconds.</p> <pre><code># Writing the if-else statement to determine seconds\n\nif [ \"$num\" -gt 59 ]; then\n    sec=$(( num%60 ))\n    num=$(( num/60 ))\nelse\n    sec=\"$num\"\nfi\n</code></pre> <p>The final value of the number of seconds will be between 0-59, so the if statement determines if the <code>num</code> variable contains a value greater than 59 before performing operations on it. </p> <p>If the value is greater than 59, then the <code>sec</code> variable will be set to the result of \"<code>num</code> modulo 60\". This will generate a digit between 0 and 59.</p> <p>Next, the <code>num</code> variable is set to the whole number generated when <code>num</code> is divided by 60. This new result for <code>num</code> is what will be used in further operations.</p> <p>If however <code>num</code> is not greater than 59, the script appropriately sets the value of <code>sec</code> to the value of <code>num</code> and ends the operation.</p> <p>Next, another if-else operation will be written to determine the appropriate number of minutes.</p>"},{"location":"date-calculator/#if-else-statement-to-determine-minutes","title":"If-Else Statement to Determine Minutes","text":"<p>In this step, you will write another if-else statement nested within the previous one. This will only be executed if the first condition in the previous if-else statement is true\u2014that is, <code>num</code> is greater than 59. </p> <p>This if-else statement will take the last set value of <code>num</code> and perform a similar operation to determine the final value of the number of minutes. This is represented by the <code>min</code> variable.</p> <pre><code>\n# Writing the if-else statement to determine seconds\n\nif [ \"$num\" -gt 59 ]; then\n    sec=$(( num%60 ))\n   num=$(( num/60 ))\n\n    # Writing the if-else statement to determine minutes\n\n    if [ \"$num\" -gt 59 ]; then\n        min=$(( num%60 ))\n        num=$(( num/60 ))\n    else\n        min=\"$num\"\n    fi\nelse\n    sec=\"$num\"\nfi\n</code></pre> <p>The highlighted section in the preceding code block is the new if-else statement nested inside the previous one. </p> <p>The final value of the number of minutes must also be within 0-59, so this if-statement checks if the new <code>num</code> value is greater than 59 or not.</p> <p>If it is, it sets the <code>min</code> variable to the result of the operation <code>num</code> modulo 60, as this will result in a number between 0-59. </p> <p><code>num</code> is again set to the result of the operation \"<code>num</code>/60\". This will be used in the next operation to determine the number of hours. </p> <p>If however <code>num</code> is now no longer greater than 59, the code sets the value of <code>min</code> to the value of <code>num</code> and ends the operations.</p> <p>Now, you will write a final if-else statement to determine the final number of hours and days together.</p>"},{"location":"date-calculator/#if-else-statement-to-determine-hours-and-days","title":"If-Else Statement to Determine Hours and Days","text":"<p>Here, your if-else statement will determine the values for both hours and days, represented by the variables <code>hour</code> &amp; <code>day</code>. </p> <p>This will also be nested in the previous conditional statement and will only be triggered if the latest value of <code>num</code> is greater than 23. A single day is composed of 24 hours, so you would expect a value for <code>hour</code> to fall within 0-23. </p> <p>The value for <code>day</code> will be whatever is left at the end of the operation. Enter the highlighted section into your script:</p> <pre><code>\n# Writing the if-else statement to determine seconds\n\nif [ \"$num\" -gt 59 ]; then\n    sec=$(( num%60 ))\n    num=$(( num/60 ))\n\n    # Writing the if-else statement to determine minutes\n\n    if [ \"$num\" -gt 59 ]; then\n        min=$(( num%60 ))\n        num=$(( num/60 ))\n\n        # Writing the if-else statement to determine hours\n\n        if [ \"$num\" -gt 23 ]; then\n            hour=$(( num%24 ))\n            day=$(( num/24 ))\n        else\n            hour=\"$num\"\n        fi\n    else\n        min=\"$num\"\n    fi\nelse\n    sec=\"$num\"\nfi\n</code></pre> <p>You will notice that instead of setting the result of \"<code>num</code>/24\" to <code>num</code>, it has been assigned to <code>day</code>. This is due to the fact that this is the last operation to be performed on the <code>num</code> variable, you no longer need to use it in any other statements. It is now set to the <code>day</code> variable and will be printed out as the total number of days.</p> <p>Although, if <code>num</code> is less than 23, then <code>hour</code> will be equal to the value of  <code>num</code>.</p> <p>Finally, you will write commands to display the results of the operations in a presentable format.</p>"},{"location":"date-calculator/#printing-out-the-result","title":"Printing out the Result","text":"<p>To print out the results, you will now call the variables <code>day</code>, <code>hour</code>, <code>min</code> and <code>sec</code>. Enter the following into your script:</p> <pre><code># To display the result\n\necho \"${day}d ${hour}h ${min}m ${sec}s between $first_date and $second_date.\"\n</code></pre> <p>You will also reference the original variables <code>first_date</code> &amp; <code>second_date</code> that store the date values whose difference you are calculating.</p> <p>An example of what the output would look like is this:</p> <pre><code>2d 0h 0m 0s between yesterday and tomorrow.\n</code></pre> <p>Your shell script date calculator is finally complete. Run it with the following command:</p> <pre><code>./date-calculator.sh\n</code></pre> <p>Enter any two dates when prompted and watch it work effortlessly. Below is an example of what the final output of your date-calculator's operations would look like:</p> <pre><code>Enter the first date:\n1 Jan 2016 05:12:12\nEnter the second date:\nyesterday 6pm\n\nStandard format for the first date: 2016-01-01 05:12:12\nStandard format for the second date: 2024-04-10 18:00:00\n\nFirst date's weekday: Thursday\nSecond date's weekday: Monday\n\nWeek of the first date: 01\nWeek of the second date: 15\n\nThe time is before noon.\nThe time is after noon.\n\n3021d 12h 47m 48s between 1 Jan 2016 05:12:12 and yesterday 6pm.\n</code></pre>"},{"location":"date-calculator/#conclusion","title":"Conclusion","text":"<p>In this article, you created a versatile date-calculator that takes in the values of two dates and does a lot of date-related operations on them to generate some pretty interesting results. Now, you know a lot about the <code>date</code> command, and you have improved your shell scripting skills. You can go on to tackle even more complex scripting projects.</p>"},{"location":"sed/","title":"Text Substitution with SED","text":""},{"location":"sed/#introduction","title":"Introduction","text":"<p>sed is a powerful tool that can be used in the Linux terminal to edit text documents without opening them first. The word \"sed\" is a contraction of the phrase \"stream editor\", it is esssentially a tool for editing streams of text. sed takes in text from a file or text received as the output of another command and lets you perform some operations on it. In this tutorial, I will demonstrate how sed can be used to make basic substitutions in text files.  </p>"},{"location":"sed/#create-a-file","title":"Create a file","text":"<p>First, open your Linux terminal and navigate to the home directory if you aren't already there. Create a file with the \"cat\" command in the same way as done below:</p> <p></p>"},{"location":"sed/#the-basic-syntax-of-sed","title":"The basic syntax of SED","text":"<p>The most common way in which you will use \"sed\" is this:</p> <pre><code>sed \u2018s/old_word/new_word/\u2019 FILENAME\n</code></pre> <p>You start with typing out \u201csed\u201d which lets the computer know you want to access the stream editor tool, \u201cs\u201d is the search operator that looks through the file. Next, you enter the word you want to substitute out or replace which is the \u201cold_word\u201d, and then the word you want to substitute in which is the \u201cnew_word\u201d. Then enter the name of the target file (FILENAME). The forward slash(/) which separates each keyword is called a delimiter, more on this will be explained later. </p> <p>Now, following this syntax let's try it out on the file we created above, myfile.txt.</p> <pre><code>sed \u2018s/box/bag/\u2019 myfile.txt\n</code></pre> <p></p> <p>When you click ENTER, you'll notice that all the first instances of the word \u201cbox\u201d on each line have been changed to \u201cbag\u201d. You'll also notice that even the word \"sandbox\" is affected and has been changed to \"sandbag\", this is because sed affects text patterns, not just specified words.</p>"},{"location":"sed/#substitute-specific-instances","title":"Substitute specific instances","text":"<p>By default, only the first instance of the specified text is altered. If you want to change the order of the affected instance, you type in the following:</p> <pre><code>sed \u2018s/box/bag/2\u2019 myfile.txt\n</code></pre> <p> </p> <p>This ensures that on each line where \u201cbox\u201d appears, the first instance is left unaltered and only the second instance changes. You can replace the number \u201c2\u201d with any other number to indicate the particular instance on each line that you want to replace.</p>"},{"location":"sed/#substitute-all-instances","title":"Substitute all instances","text":"<p>If you want all instances of the target word on every line to be replaced, enter:</p> <pre><code>sed \u2018s/box/bag/g\u2019 myfile.txt\n</code></pre> <p></p> <p>The \u201cg\u201d operator tells the computer you want to replace the word \"box\" globally, that is, everywhere it occurs in the file.</p>"},{"location":"sed/#substitute-text-without-being-case-sensitive","title":"Substitute text without being case-sensitive","text":"<p>Suppose you want to find and replace a word in a way that does not return an error because of case-sensitivity issues. Perhaps the word occurs in capital letters at some point in the file. The \"i\" operator is used to resolve this issue and it works like this:</p> <pre><code>sed \u2018s/BOX/bag/i\u2019 myfile.txt\n</code></pre> <p></p> <p>This will replace all instances of the word irrespective of the casing of the letters.</p>"},{"location":"sed/#substitute-text-on-specific-lines","title":"Substitute text on specific lines","text":"<p>To find and replace a text pattern on a specific line instead of all the lines, use the following command:</p> <pre><code>sed \u20183 s/box/bag/\u2019 myfile.txt\n</code></pre> <p></p> <p>In the image above, you will see that only the first instance of \"box\" on the third line has been substituted out. Placing the number \"3\" before \u201cs\u201d tells the computer that in myfile.txt we want to find and replace the word \"box\" in the third line only. You can change the number to the number of the line where you want your substitution made.</p> <p>Note: If you have a large file, to display the line numbers, enter this command:  </p> <pre><code>    sed = myfile.txt\n</code></pre>"},{"location":"sed/#substitute-text-in-a-range-of-lines","title":"Substitute text in a range of lines","text":"<p>To find and replace text in a range of lines:</p> <pre><code>sed \u20181,3 s/box/bag/\u2019 myfile.txt\n</code></pre> <p></p> <p>The first number is followed by the second number and a comma separates them, this lets the computer know that you want your sed substitutions made within that range of lines. In this case that is within the range of line 1 to line 3.</p>"},{"location":"sed/#make-multiple-sed-substitutions","title":"Make Multiple SED substitutions","text":"<p>If you want to use the sed command multiple times on the same text file, there are various ways for you to do this in one entry in the Linux terminal. To substitute both the words \"box\" and \"black\" with the words \"bag\" and \"red\" respectively in the text file we created, myfile.txt , we can use any of the following methods:  </p> <p>i. Use pipe (|)</p> <pre><code>    sed \u2018s/box/bag/\u2019 myfile.txt | sed \u2018s/black/red/\u2019\n</code></pre> <p></p> <p>Remember, sed can take in output gotten from a previous command and perform some operation on it. In the above scenario, we have piped in output gotten from a previous sed command to let us substitute another text in the same file. This lets us make multiple SED substitutions at once.</p> <p>ii. Use the \u201c-e\u201d option</p> <pre><code>    sed -e \u2018s/box/bag/\u2019 -e \u2018s/black/red/\u2019 myfile.txt\n</code></pre> <p></p> <p>\u201c-e\u201d is an option provided by sed that makes it convenient to make multiple substitutions without needing to call out sed each time. You place it right before each command, and it can be used several times.</p> <p>iii. Use the semicolon(;)</p> <pre><code>    sed \u2018s/box/bag/;s/black/red/\u2019 song.txt\n</code></pre> <p></p> <p>The semicolon lets you join all the multiple substitution commands you want to make into one without needing to split them into different groups like the \u201c-e\u201d option requires. It is by far the most convenient, but the -e option will be better in certain situations.</p>"},{"location":"sed/#print-out-only-edited-lines","title":"Print out only edited lines","text":"<p>To print out only the lines that you have worked on, perhaps it is a really large file and you want to isolate  the lines you have altered with sed, you enter the following command:</p> <pre><code>sed -n \u2018s/box/bag/p\u2019 myfile.txt\n</code></pre> <p></p> <p>\u201c-n\u201d is an option that suppresses automatic printing, while the \u201cp\u201d operator causes double printing of the edited lines. The combination of these two will output the edited lines only.</p>"},{"location":"sed/#delimiters","title":"Delimiters","text":"<p>We've been using the forward-slash(/) as a delimiter to separate the relevant categories of our substitution command in the terminal, but sometimes there will be situations where this will not work. For example, if you're trying to use SED on a URL, the URL already has forward slashes (/) and this will cause an error to occur if you try to use a forward-slash(/) as a delimiter. Fortunately, other special characters can be used as delimiters too. Example:</p> <pre><code>echo \u201chttps://www.wikipedia.org/homepage.html\u201d | sed \u2018s$org/homepage$inc/search$\u2019\n</code></pre> <p></p> <p>Here we use a dollar-sign($) as a delimiter to separate the text we want to substitute out \"org/homepage\" and the one we want to substitute in \"inc/search\". If we had tried using the forward-slash(/) as a delimiter, it would have returned an error.</p>"},{"location":"sed/#save-changes","title":"Save changes","text":"<p>At this point, you may have noticed that all the changes we've been making with sed are temporary, not permanent. The myfile.txt file when opened with the cat command is still in its original form, this is by design. To make the changes permanent, you have to pass the \u201c-i\u201d option in this manner:</p> <pre><code>sed -i \u2018s/black/red/` myfile.txt\n</code></pre> <p></p> <p>Now when you open the file, you will see that the color \"black\" has been substituted out for \"red\".  </p> <p>Note: It is not advised to use the \u201c-i\u201d option casually because doing so could cause you to permanently lose your data. Use it only when you are certain you want to make irreversible changes.</p>"},{"location":"sed/#save-changes-to-a-new-file","title":"Save changes to a new file","text":"<p>If however you want the old file unaltered but want to save your edits to a new file, enter this: </p> <pre><code>sed \u2018s/box/bag/g\u2019 myfile.txt &gt; secondfile.txt\n</code></pre> <p>The greater-than(&gt;) sign directs the computer to save the changes from myfile.txt to the file secondfile.txt, which is automatically created if it did not exist before.  So when you open secondfile.txt, you'll see the following:  </p> <p></p>"},{"location":"sed/#make-a-backup","title":"Make a backup","text":"<p>You can also pass a command that tells the computer to permanently edit a file but keep a backup of the original document. To do this, you type out a variation of the \u201c-i\u201d option which is the \u201c-i.bak\u201d option. It is used like this:</p> <pre><code>sed -i.bak \u2018s/box/bag/g\u2019 myfile.txt\n</code></pre> <p>The above lets you make permanent changes but creates a backup of the original file with a \u201c.bak\u201d extension. So the backup created from the command above will be \"myfile.txt.bak\".</p> <p></p> <p>We can see that myfile.txt is permanently altered and myfile.txt.bak contains its original content</p>"},{"location":"sed/#conclusion","title":"Conclusion","text":"<p>Now you know the different ways of using sed to make basic substitutions in text files in the command line, how to make multiple sed changes in one entry, and how to save your changes permanently.</p>"},{"location":"sedfordevto/","title":"Text Substitution with the sed command in Linux","text":""},{"location":"sedfordevto/#introduction","title":"Introduction","text":"<p><code>sed</code> is a powerful tool often used in the Linux terminal to edit text documents without opening them. The word \"sed\" is a contraction of the phrase \"Stream Editor\". It is essentially a tool for editing streams of text. <code>sed</code> takes in text from a file or text received from standard input (stdin) and lets you perform some operations on it. In this tutorial, I will demonstrate how <code>sed</code> can be used to make string substitutions in text files in the Linux command-line environment.</p>"},{"location":"sedfordevto/#creating-a-file","title":"Creating a File","text":"<p>First, open your Linux terminal and navigate to your home directory if you aren't there already. Create a new file with the <code>cat</code> command by following the succeeding code block:</p> <pre><code>cat &lt;&lt; EOF &gt; myfile.txt\nThis is my box.\nIt is mine.\nMy box is big, it is a big box.\nMy box is black, my box is strong, my box is the best.\nMy mother bought it for me.\nLet's go to the sandbox to play with my box.\nEOF\n</code></pre> <p>This is the sample file which we will perform most of our <code>sed</code> operations on. In the next section, you will begin to see how the <code>sed</code> command is fundamentally used to alter and substitute text.</p>"},{"location":"sedfordevto/#the-basic-syntax-of-sed","title":"The Basic Syntax of <code>sed</code>","text":"<p>The most common way in which you will use <code>sed</code> is this:</p> <pre><code>sed 's/OLD-WORD/NEW-WORD/' FILENAME\n</code></pre> <p>You start with typing the <code>sed</code> keyword which lets the computer know you want to access the stream editor tool. </p> <p><code>s</code> is the search operator that looks through the file.</p> <p>Next, you enter the word you want to substitute out or replace which is the <code>OLD-WORD</code>, and the word you want to substitute in which is the <code>NEW-WORD</code>. </p> <p>Then you enter the name of the target file <code>FILENAME</code> you wish to perform this <code>sed</code> operation on. </p> <p>The forward slash <code>/</code> which separates each keyword is called a delimiter, more on delimiters will be explained later.</p> <p>Now, using the <code>sed</code> command in the file you created earlier, myfile.txt, you will attempt to replace instances of the old word box with a new word bag.</p> <p>Enter the following command and press <code>ENTER</code>:</p> <pre><code>sed 's/box/bag/' myfile.txt\n</code></pre> <p>Immediately, the following output is displayed:</p> <pre>\nThis is my bag.\nIt is mine.\nMy bag is big, it is a big box.\nMy bag is black, my box is strong, my box is the best.\nMy mother bought it for me.\nLet's go to the sandbag to play with my box.\n</pre> <p>You may notice that the word sandbox has been altered to sandbag. This occurs because the <code>sed</code> command acts on text patterns it encounters, not simply the standalone word.</p> <p>You may also observe that on each line, only the first instance of box is changed to bag. The rest are left unchanged. You can look at the highlighted words in the generated output to observe this.</p> <p>Note: The file myfile.txt itself remains unchanged. By default the <code>sed</code> command prints the result of its operation to standard output (stdout). More on how to permanently save your edits will be covered later.</p>"},{"location":"sedfordevto/#substituting-specific-instances","title":"Substituting Specific Instances","text":"<p>By default, only the first instance of the specified text is altered. If you wish to change the order of the affected instance, you type in the following:</p> <pre><code>sed 's/box/bag/2' myfile.txt\n</code></pre> <p>The following output is displayed in your terminal upon execution:</p> <pre>\nThis is my box.\nIt is mine.\nMy box is big, it is a big bag.\nMy box is black, my bag is strong, my box is the best.\nMy mother bough it for me.\nLet's go to the sandbox to play with my bag.\n</pre> <p>In the command entered, you'll notice that we've added a number 2. What this does is, it makes it so that on each line where box appears, it isn't the first instance that is altered, but rather, the second instance. Looking at the generated output, you will be able to observe this.</p> <p>You may replace 2 with any number to denote which instance of the old word you wish to substitute out for your new word.</p>"},{"location":"sedfordevto/#substituting-all-instances","title":"Substituting All instances","text":"<p>If you wish for every instance of the old word box in the file to be replaced with the new word bag, enter the following command:</p> <pre><code>sed 's/box/bag/g' myfile.txt\n</code></pre> <p>You should see this output:</p> <pre>\nThis is my bag.\nIt is mine.\nMy bag is big, it is a big bag.\nMy bag is black, my bag is strong, my bag is the best.\nMy mother bought it for me.\nLet's go to the sandbag to play with my bag.\n</pre> <p>The <code>g</code> flag added indictates you want to make the substitution globally, i.e everywhere the old word occurs in the file.</p>"},{"location":"sedfordevto/#navigating-case-insensitive-substitutions","title":"Navigating Case-Insensitive Substitutions","text":"<p>The <code>sed</code> command is by default case-sensitive. Using the <code>i</code> flag in your <code>sed</code> operation helps you make case-insensitive substitutions. This is for situations where you wish to find and replace instances of the old word regardless of the letter case they may be in. Below is an example:</p> <pre><code>sed 's/BOX/bag/i' myfile.txt\n</code></pre> <p>The output:</p> <pre>\nThis is my bag.\nIt is mine.\nMy bag is big, it is a big box.\nMy bag is black, my box is strong, my box is the best.\nMy mother bought it for me.\nLet's go to the sandbag to play with my box.\n</pre> <p>You'll observe that even though BOX is used in the command, instances of its lower-case, box, in the file are altered. The substitution wouldn't work without the <code>i</code> flag, you can try this out in your terminal environment to see.</p> <p>In the next section, we will see how to make changes on designated lines.</p>"},{"location":"sedfordevto/#substituting-text-on-specific-lines","title":"Substituting Text on Specific Lines","text":"<p>To find and replace a text pattern on a specific line, instead of all the lines in the file, use the following command:</p> <pre><code>sed '3 s/box/bag' myfile.txt\n</code></pre> <p>Generated output:</p> <pre>\nThis is my box.\nIt is mine.\nMy bag is big, it is a big box.\nMy box is black, my box is strong, my box is the best.\nMy mother bought it for me.\nLet's go to the sandbox to play with my box.\n</pre> <p>In the preceding generated output, you will observe that only the first instance of box on the third line has been substituted out. Placing the number <code>3</code> before <code>s</code> tells the computer that in <code>myfile.txt</code> you want to find and replace the word box for bag in the third line only. </p> <p>Also, you can change that number to whatever line number you want your substitution made instead.</p> <p>Note: If you have a large file, to display the line numbers, enter this command: <code>sed = myfile.txt</code></p>"},{"location":"sedfordevto/#substituting-text-in-a-range-of-lines","title":"Substituting Text in a Range of Lines","text":"<p>To find and replace text in a range of lines:</p> <pre><code>sed '1,3 s/box/bag/' myfile.txt\n</code></pre> <p>The displayed output</p> <pre>\nThis is my bag.\nIt is mine.\nMy bag is big, it is a big box.\nMy box is black, my box is strong, my box is the best.\nMy mother bought it for me.\nLet's go to the sandbox to play with my box\n</pre> <p>In the <code>sed</code> command entered, the first number is followed by the second number and a comma separates them. This command lets the computer know that you want your <code>sed</code> substitutions to be made within the range of line 1 to line 3.</p> <p>In the next section, we will experiment with different ways of how to execute multiple <code>sed</code> substitutions at a go.</p>"},{"location":"sedfordevto/#making-multiple-sed-substitutions","title":"Making Multiple <code>sed</code> Substitutions","text":"<p>At times, you may wish to use the <code>sed</code> command multiple times on the same text file, there are various ways for you to execute this in one command entry in the Linux terminal.</p> <p>To demonstrate this, you will substitute the words box with bag and black with red in the text file we created, myfile.txt. This can be done using any of the following methods:  </p>"},{"location":"sedfordevto/#1-using-pipe","title":"1. Using Pipe <code>|</code>","text":"<p>Enter in the following command:</p> <pre><code>sed 's/box/bag/' myfile.txt | sed 's/black/red/'\n</code></pre> <p>The output:</p> <pre>\nThis is my bag.\nIt is mine.\nMy bag is big, it is a big box.\nMy bag is red, my box is strong, my box is the best.\nMy mother bought it for me.\nLet's go to the sandbag to play with my box\n</pre> <p>Remember, <code>sed</code> is a Stream Editor. It prints out to standard output(stdout) and can also take in text piped in from standard input(stdin). In the above scenario, the output from the first <code>sed</code> substitution is piped in to the next <code>sed</code> command to make its own substitutions too. This lets us make multiple <code>sed</code> substitutions at once.</p>"},{"location":"sedfordevto/#2-using-the-e-option","title":"2. Using the <code>-e</code> Option","text":"<p>You may use the <code>-e</code> option provided by <code>sed</code> to conveniently execute multiple <code>sed</code> substitutions at a go. See below:</p> <pre><code>sed -e 's/box/bag/' -e 's/black/red/' myfile.txt\n</code></pre> <p>Output:</p> <pre>\nThis is my bag.\nIt is mine.\nMy bag is big, it is a big box.\nMy bag is red, my box is strong, my box is the best.\nMy mother bought it for me.\nLet's go to the sandbag to play with my box\n</pre>"},{"location":"sedfordevto/#3-using-the-semicolon","title":"3. Using the Semicolon <code>;</code>","text":"<p>The semicolon <code>;</code> allows you to quickly conjoin your multiple <code>sed</code> commands and execute them at once on the same file. See below:</p> <pre><code>sed 's/box/bag/;s/black/red/' myfile.txt\n</code></pre> <p>Printed output:</p> <pre>\nThis is my bag.\nIt is mine.\nMy bag is big, it is a big box.\nMy bag is red, my box is strong, my box is the best.\nMy mother bought it for me.\nLet's go to the sandbag to play with my box\n</pre> <p>We've seen the different ways available that help facilitate executing multiple <code>sed</code> substitutions at a go. In the next section we will go over what happens when you only want the lines you've altered returned to output. </p>"},{"location":"sedfordevto/#printing-edited-lines-only","title":"Printing Edited Lines Only","text":"<p>If you are working on a huge file, and you don't want the output of your <code>sed</code> commands on the file filling up your terminal environment each time you make an execution. There is a method you can use to isolate and output only the lines of the file your command has altered. See below:</p> <pre><code>sed -n 's/box/bag/p' myfile.txt\n</code></pre> <p>This is the generated output:</p> <pre>\nThis is my bag.\nMy bag is big, it is a big box.\nMy bag is black, my box is strong, my box is the best.\nLet's go to the sandbag to play with my box\n</pre> <p>In the command executed we use the <code>-n</code> option and the <code>p</code> flag. The <code>-n</code> option suppresses automatic printing of the output. Meanwhile, the <code>p</code> flag causes double printing of the edited lines. The combination of these two will cause the command to print out the edited lines only.</p> <p>Note: <code>sed</code> provides a whole lot of options and flags you can use to make all kinds of tweaks to your substitutions. To access them, you simply enter <code>sed --help</code> into your terminal or <code>man sed</code> for the full user manual.</p>"},{"location":"sedfordevto/#delimiters","title":"Delimiters","text":"<p>So far, we've been using the forward-slash <code>/</code> as a delimiter to separate the relevant categories of our substitution commands in the terminal. Although, there will be situations where this will not suffice. </p> <p>For example if you're trying to use <code>sed</code> on a URL, a URL already has forward slashes <code>/</code> so an error will occur if you try to use a forward-slash(/) as a delimiter. Fortunately, other special characters can be used as delimiters too. </p> <p>Let us try to make a <code>sed</code> substitution on the URL <code>https://www.wikipedia.org/homepage.html</code>. We will take the text pattern org/homepage and replace it with inc/search. See below:</p> <pre><code>echo \"https://www.wikipedia.org/homepage.html\" | sed 's$org/homepage$inc/search$'\n</code></pre> <p>The resulting output:</p> <pre>\nhttps://www.wikipedia.inc/search.html\n</pre> <p>In the command entered, notice that we now use a dollar-sign <code>$</code> as a delimiter to separate the text we want to substitute out org/homepage and the text to be substituted in inc/search. If we had tried using the forward-slash <code>/</code> as a delimiter, the operation wouldn't have been successful.</p>"},{"location":"sedfordevto/#saving-changes","title":"Saving Changes","text":"<p>It is not enough to only make our edits in stream, you may wish to have the files altered permanently. To make the changes permanent, you must pass the <code>-i</code> option. See below for an example acting on the earlier created myfile.txt file:</p> <pre><code>sed -i 's/black/red/' myfile.txt\n</code></pre> <p>To confirm that the file has been altered, you will open it with the <code>cat</code> command like this:</p> <pre><code>cat myfile.txt\n</code></pre> <p>The result:</p> <pre>\nThis is my box.\nIt is mine.\nMy box is big, it is a big box.\nMy box is red, my box is strong, my box is the best.\nMy mother bought it for me.\nLet's go to the sandbox to play with my box.\n</pre> <p>Owing to the <code>-i</code> option, we have now confirmed that the old word <code>black</code> has been replaced with a new word <code>red</code> permanently.</p> <p>Note: It is not advised to use the <code>-i</code> option casually because doing so could cause you to permanently lose your data. Use it only when you are certain you want to make irreversible changes.</p>"},{"location":"sedfordevto/#saving-changes-to-a-new-file","title":"Saving Changes to a New File","text":"<p>Suppose instead you wanted to save your changes to a new file leaving the first one unaltered. Enter the following command:</p> <pre><code>sed 's/box/bag/g' myfile.txt &gt; secondfile.txt\n</code></pre> <p>If the file secondfile.txt did not exist, it is created automatically in your present working directory with the output generated from the <code>sed</code> command executed. </p> <p>If you open the file with the command <code>cat secondfile.txt</code>, you should see the following:</p> <pre>\nThis is my bag.\nIt is mine.\nMy bag is big, it is a big bag.\nMy bag is red, my bag is strong, my bag is the best.\nMy mother bought it for me.\nLet's go to the sandbag to play with my bag.\n</pre>"},{"location":"sedfordevto/#making-a-backup","title":"Making a Backup","text":"<p>You can also pass an option that tells the computer to permanently edit the file but create a backup of the original document. To do this, you type out a variation of the <code>-i</code> option, which is the <code>-i.bak</code> option. It is used like this:</p> <pre><code>sed -i.bak 's/box/bag/g' myfile.txt\n</code></pre> <p>The above command will save your changes to the myfile.txt file, but also creates a backup of the original file with a .bak extension in the same directory. So the backup created from the command above will be myfile.txt.bak.</p> <p>Running <code>cat myfile.txt</code> gets you:</p> <pre>\nThis is my bag.\nIt is mine.\nMy bag is big, it is a big bag.\nMy bag is red, my bag is strong, my bag is the best.\nMy mother bought it for me.\nLet's go to the sandbag to play with my bag.\n</pre> <p>Running <code>cat myfile.txt.bak</code> gets you:</p> <pre>\nThis is my box.\nIt is mine.\nMy box is big, it is a big box.\nMy box is red, my box is strong, my box is the best.\nMy mother bought it for me.\nLet's go to the sandbox to play with my box.\n</pre> <p>You can see that myfile.txt is permanently altered while myfile.txt.bak contains its original content.</p>"},{"location":"sedfordevto/#conclusion","title":"Conclusion","text":"<p>Now you know the different ways of using <code>sed</code> to make basic substitutions in text files in the linux command line, how to make multiple sed changes in one entry, and how to save your changes permanently.</p>"},{"location":"storagefordevto/","title":"Understanding Block Storage and Object Storage","text":""},{"location":"storagefordevto/#introduction","title":"Introduction","text":"<p>In the world of IT, there are different storage solutions available to satisfy the different storage needs businesses have for their data. Let us look at two popular storage solutions, Block Storage and Object Storage, go over their strengths and weaknesses, and see how they compare to each other.</p>"},{"location":"storagefordevto/#block-storage","title":"Block Storage","text":"<p> Block storage is a traditional storage format wherein data is broken up into pieces and stored inside blocks of fixed equal sizes. These blocks come with unique identifiers and very limited metadata.</p> <p>The unique identifiers are important because they allow for the blocks to be stored across multiple physical storage devices in a network instead of being stored on just one device. They also make it possible for the blocks to be easily tracked and reassembled when a user wants to access that data.</p> <p>The software used to provision, divide, and track these blocks (i.e. the software used to manage this storage format) is typically completely separate from the physical storage device(s). These software tools are referred to as block storage management tools. Some examples of them are:  </p> <ul> <li>Amazon Elastic Block Store (EBS)  </li> <li>DigitalOcean Volumes Block Storage</li> <li>Serverspace Block Storage</li> <li>Vultr Block Storage</li> <li>Azure Disk Storage  </li> </ul> <p>Block storage volumes can be attached to a computer locally, connected over a SAN (Storage Area Network) or utilized in a cloud environment. Communication between the computer and the block storage device is usually done via storage protocols like FC (Fibre Channel), FCoE (Fibre Channel over Ethernet), iSCSI (Internet Small Computers System Interface), etc.</p> <p>Block storage volumes provisioned remotely are configured to be like individual hard drives and are usually accessed at the OS level.</p> <p>A block storage volume in a cloud environment will typically be decoupled from its server, and this key feature allows you to shut down a server and still retain the data in its storage volume which can then be reattached to another server, all the while incurring zero data loss.</p> <p>Block storage does not come with built-in resiliency measures but this can be solved by using erasure coding, RAID, etc., to achieve data redundancy, increased performance and other benefits. These measures may be deployed generally or specifically for mission-critical workloads.</p>"},{"location":"storagefordevto/#advantages-of-block-storage","title":"Advantages of Block Storage","text":"<ol> <li> <p>Block storage volumes are flexible. This means they can be configured to serve a variety of business needs. You can format it with a file system like FAT32, EXT 3, EXT 4, and NTFS. You can set up a database to write straight to your block storage device. You can connect multiple block storage devices to achieve a RAID (Redundant Array of Independent Disks) volume.</p> </li> <li> <p>Boot volumes are block volumes that have been configured to boot an OS for the server they are attached to, and this is a very important feature in the cloud space.</p> </li> <li> <p>Block storage is known for providing consistently high IOPS (Input/Output per Second).</p> </li> <li> <p>Data delivery with reliable low latency is guaranteed with block storage. However, a factor that may affect this is the physical distance between the block storage volume and the application using it, with greater distances leading to higher latency.</p> </li> <li> <p>With block storage, you can make edits to specific data blocks without having to re-upload the entire data file.</p> </li> <li> <p>It allows for simple management of access privileges.</p> </li> </ol>"},{"location":"storagefordevto/#disadvantages-of-block-storage","title":"Disadvantages of Block Storage","text":"<ol> <li> <p>Block storage is a relatively more costly form of storage. This is because it demands significant investment upfront, along with a highly skilled maintenance staff. </p> </li> <li> <p>While block storage is highly scalable, when it begins to scale to terabytes and beyond, its complexity also increases, making it harder to locate specific data files.</p> </li> <li> <p>Block storage\u2019s limited metadata capabilities make it impossible to perform advanced search operations.</p> </li> </ol>"},{"location":"storagefordevto/#use-cases-for-block-storage","title":"Use cases for Block Storage","text":"<ol> <li> <p>Transactional databases and relational databases in general require low latency, high IOPs data delivery and the ability to perform incremental updates to data files. Block storage excels in these areas.</p> </li> <li> <p>Mission-critical workloads are often run with block storage because of its high performance and reliably swift data delivery.</p> </li> <li> <p>Virtual machines require boot volumes and general block storage volumes to be able to function.</p> </li> <li> <p>Block storage volumes can be organized into RAID volumes.</p> </li> <li> <p>Block storage is necessary for programs that need server-side processing such as programs written in .NET, Java, etc.</p> </li> <li> <p>Block storage is very instrumental when working with containers because block volumes allow you to preserve a container's data beyond the container\u2019s typical lifespan.</p> </li> </ol>"},{"location":"storagefordevto/#object-storage","title":"Object Storage","text":"<p>Object storage is a more recent form of data storage that rose to popularity in the early 2000s because of how well it helped enterprises around the world to store and manage the voluminous amounts of unstructured data being generated as a result of the growing internet. Trillions of data units in a variety of formats are generated on the internet every year and around 80% of that data is unstructured. </p> <p>With object storage, each data file is stored wholly inside a distinct object, and these objects, which could number in the millions or even billions, are organized in a flat-file structure (as opposed to a hierarchy) and stored in a single-level repository.  </p> <p>The abstraction of some of the lower levels of storage is one of the core tenets of object storage. Lower-level storage tasks like creating and managing storage volumes to make the most of disk space or configuring RAID levels to handle disk failure no longer need to be carried out. As a result, rather than accessed as blocks, data is accessed and controlled as objects. An object typically contains:</p> <ul> <li>A particular data file.</li> <li>Metadata which provides the necessary information about the data file in the object.</li> <li>A Globally Unique Identifier (GUID)</li> <li>Attributes: these provide information about the object itself, information about what users can download the object, delete the object, etc.</li> </ul> <p>A key function of object storage is its customizable metadata. Tthere is no limit to the amount or nature of contextual information about the data that can be added to it. The size of the metadata of a data file can even be larger than the size of the data file itself. This then allows for a more thorough classification and management of the data files which prove important when advanced search and analytics operations need to be undertaken.</p> <p>These objects are usually accessed via an API (Application Programming Interface) or directly by HTTP(S), they are tracked down by their GUIDs and the data delivery is done by TCP/IP. This ensures that the ease of accessing individual data files remains relatively the same irrespective of the scale of the entire storage space. </p> <p>And object storage is highly scalable, you could scale your storage up to even petabytes and beyond while still maintaining data integrity. You scale out simply by adding more nodes to your storage cluster and will usually only be required to pay for the storage space you need.</p> <p>Object storage has inbuilt resiliency measures to protect your data. Data stored in objects are replicated multiple times and stored across several storage devices, so your data will always be accessible to you even if there is a fault with one or even several of these storage devices. In case of a corruption of one object, you can simply access one of the separately stored copies. This guarantees high availability of your data.</p> <p>You can also enable object versioning, which is a feature that lets you track many different versions of your data. In the case of accidental deletions or updates, you can simply access the previous versions. Though under normal circumstances, the most important version to your business or project will be the latest version of the object.</p>"},{"location":"storagefordevto/#advantages-of-object-storage","title":"Advantages of Object Storage","text":"<ol> <li> <p>It provides limitless scalability.</p> </li> <li> <p>Its flat-file structure allows for easy and quick retrieval of data.</p> </li> <li> <p>Its powerful metadata capabilities allow for extensive and detailed search and analytics operations.</p> </li> <li> <p>It comes with inbuilt resiliency protocols to ensure high availability of your data.</p> </li> <li> <p>Object storage is more cost-effective than the other storage solutions on the market.</p> </li> <li> <p>Object storage has the added benefit of abstracting away the maintenance of the underlying physical storage devices.</p> </li> <li> <p>Object storage allows for versioning and its attendant benefits.</p> </li> </ol>"},{"location":"storagefordevto/#disadvantages-of-object-storage","title":"Disadvantages of Object Storage","text":"<ol> <li> <p>The Objects in object storage are immutable. THis means if you try to make changes to a data file in an object, you would have to re-upload the new file with its changes to a new object. For this reason, it is a terrible choice for storing data that requires consistent updates.</p> </li> <li> <p>Its performance is relatively slower than other storage solutions, this is why it is used mostly for cold storage.</p> </li> <li> <p>Object storage cannot be accessed directly at the OS level without significant degradation in performance.</p> </li> </ol>"},{"location":"storagefordevto/#use-cases-for-object-storage","title":"Use cases for Object Storage","text":"<ol> <li> <p>Object storage is extremely useful in the field of big data analytics, this is due to its high scalability and limitless metadata functions.</p> </li> <li> <p>IoT (Internet of Things); object storage is extremely useful for storing and archiving the enormous amounts of unstructured data generated by IoT devices.</p> </li> <li> <p>Object storage makes it easy to store, scale and manage your image files, audio files and other forms of media files with relative ease. It is a popular choice among social media companies, file-sharing sites and streaming services for this very reason.</p> </li> <li> <p>It is extremely useful in disaster recovery plans, this is owing to its inbuilt resiliency protocols.</p> </li> <li> <p>It\u2019s a safe and cost-effective option for storing backups and archived files that will be accessed infrequently. In essence, it\u2019s a great choice for cold storage.</p> </li> <li> <p>Most object storage services can also deliver data to your users publicly, this is why it makes for a great choice when looking to host static websites.</p> </li> </ol>"},{"location":"storagefordevto/#block-storage-vs-object-storage","title":"Block Storage vs Object Storage","text":"<p>Now let\u2019s examine some of the key distinctions between block storage and object storage:  </p> Block Storage Object Storage Its metadata capabilities are limited. Its metadata can be customized extensively. It can only safely scale up to a certain point. It offers limitless scalability while still retaining accessibility. It is more costly. It is more cost effective. It performs best with operations requiring high IOPS and low latency like relational database storage. It performs best with large volumes of unstructured data. It can be accessed at the OS level. It cannot be accessed at the OS level without a significant drop in performance. Block storage requires management and configuration of its volumes. With object storage the management process is abstracted away by the provider. The distance between the storage location and the application accessing it can affect latency. The data can be stored across a wide possible range of locations with no effect on latency. Data is broken up into raw blocks and stored in a hierarchical order. Data is stored whole inside distinct objects organized in a flat-file order. It allows for incremental edits to files. Making changes to files in an object would require the creation of a new object."},{"location":"storagefordevto/#conclusion","title":"Conclusion","text":"<p>In essence, block storage excels in high performance for frequently accessed, structured data, while object storage shines in scalability and cost-effectiveness for massive archives and unstructured data. Understanding these strengths and the attendant tradeoffs will help you pick the right storage solution for your needs.</p>"}]}