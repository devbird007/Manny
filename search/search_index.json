{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to Text Substitution with SED sed is a powerful tool that can be used in the Linux terminal to edit text documents without opening them first. The word \"sed\" is a contraction of the phrase \"stream editor\", it is esssentially a tool for editing streams of text. sed takes in text from a file or text received as the output of another command and lets you perform some operations on it. In this tutorial, I will demonstrate how sed can be used to make basic substitutions in text files.","title":"Introduction"},{"location":"#introduction-to-text-substitution-with-sed","text":"sed is a powerful tool that can be used in the Linux terminal to edit text documents without opening them first. The word \"sed\" is a contraction of the phrase \"stream editor\", it is esssentially a tool for editing streams of text. sed takes in text from a file or text received as the output of another command and lets you perform some operations on it. In this tutorial, I will demonstrate how sed can be used to make basic substitutions in text files.","title":"Introduction to Text Substitution with SED"},{"location":"tut/","text":"Create a file First, open your Linux terminal and navigate to the home directory if you aren't already there. Create a file with the \"cat\" command in the same way as done below: The basic syntax of SED The most common way in which you will use \"sed\" is this: sed \u2018s/old_word/new_word/\u2019 FILENAME You start with typing out \u201c sed \u201d which lets the computer know you want to access the stream editor tool, \u201cs\u201d is the search operator that looks through the file. Next, you enter the word you want to substitute out or replace which is the \u201cold_word\u201d, and then the word you want to substitute in which is the \u201cnew_word\u201d. Then enter the name of the target file (FILENAME). The forward slash(/) which separates each keyword is called a delimiter, more on this will be explained later. Now, following this syntax let's try it out on the file we created above, myfile.txt. sed \u2018s/box/bag/\u2019 myfile.txt When you click ENTER, you'll notice that all the first instances of the word \u201cbox\u201d on each line have been changed to \u201cbag\u201d. You'll also notice that even the word \"sandbox\" is affected and has been changed to \"sandbag\", this is because sed affects text patterns, not just specified words. Substitute specific instances By default, only the first instance of the specified text is altered. If you want to change the order of the affected instance, you type in the following: sed \u2018s/box/bag/2\u2019 myfile.txt This ensures that on each line where \u201cbox\u201d appears, the first instance is left unaltered and only the second instance changes. You can replace the number \u201c2\u201d with any other number to indicate the particular instance on each line that you want to replace. Substitute all instances If you want all instances of the target word on every line to be replaced, enter: sed \u2018s/box/bag/g\u2019 myfile.txt The \u201cg\u201d operator tells the computer you want to replace the word \"box\" globally, that is, everywhere it occurs in the file. Substitute text without being case-sensitive Suppose you want to find and replace a word in a way that does not return an error because of case-sensitivity issues. Perhaps the word occurs in capital letters at some point in the file. The \"i\" operator is used to resolve this issue and it works like this: sed \u2018s/BOX/bag/i\u2019 myfile.txt This will replace all instances of the word irrespective of the casing of the letters. Substitute text on specific lines To find and replace a text pattern on a specific line instead of all the lines, use the following command: sed \u20183 s/box/bag/\u2019 myfile.txt In the image above, you will see that only the first instance of \"box\" on the third line has been substituted out. Placing the number \"3\" before \u201cs\u201d tells the computer that in myfile.txt we want to find and replace the word \"box\" in the third line only. You can change the number to the number of the line where you want your substitution made. Note : If you have a large file, to display the line numbers, enter this command: sed = myfile.txt Substitute text in a range of lines To find and replace text in a range of lines: sed \u20181,3 s/box/bag/\u2019 myfile.txt The first number is followed by the second number and a comma separates them, this lets the computer know that you want your sed substitutions made within that range of lines. In this case that is within the range of line 1 to line 3. Make Multiple SED substitutions If you want to use the sed command multiple times on the same text file, there are various ways for you to do this in one entry in the Linux terminal. To substitute both the words \"box\" and \"black\" with the words \"bag\" and \"red\" respectively in the text file we created, myfile.txt , we can use any of the following methods: i. Use pipe (|) sed \u2018s/box/bag/\u2019 myfile.txt | sed \u2018s/black/red/\u2019 Remember, sed can take in output gotten from a previous command and perform some operation on it. In the above scenario, we have piped in output gotten from a previous sed command to let us substitute another text in the same file. This lets us make multiple SED substitutions at once. ii. Use the \u201c-e\u201d option sed -e \u2018s/box/bag/\u2019 -e \u2018s/black/red/\u2019 myfile.txt \u201c-e\u201d is an option provided by sed that makes it convenient to make multiple substitutions without needing to call out sed each time. You place it right before each command, and it can be used several times. iii. Use the semicolon(;) sed \u2018s/box/bag/;s/black/red/\u2019 song.txt The semicolon lets you join all the multiple substitution commands you want to make into one without needing to split them into different groups like the \u201c-e\u201d option requires. It is by far the most convenient, but the -e option will be better in certain situations. Print out only edited lines To print out only the lines that you have worked on, perhaps it is a really large file and you want to isolate the lines you have altered with sed , you enter the following command: sed -n \u2018s/box/bag/p\u2019 myfile.txt \u201c-n\u201d is an option that suppresses automatic printing, while the \u201cp\u201d operator causes double printing of the edited lines. The combination of these two will output the edited lines only. Delimiters We've been using the forward-slash(/) as a delimiter to separate the relevant categories of our substitution command in the terminal, but sometimes there will be situations where this will not work. For example, if you're trying to use SED on a URL, the URL already has forward slashes (/) and this will cause an error to occur if you try to use a forward-slash(/) as a delimiter. Fortunately, other special characters can be used as delimiters too. Example: echo \u201chttps://www.wikipedia.org/homepage.html\u201d | sed \u2018s$org/homepage$inc/search$\u2019 Here we use a dollar-sign($) as a delimiter to separate the text we want to substitute out \"org/homepage\" and the one we want to substitute in \"inc/search\". If we had tried using the forward-slash(/) as a delimiter, it would have returned an error. Save changes At this point, you may have noticed that all the changes we've been making with sed are temporary, not permanent. The myfile.txt file when opened with the cat command is still in its original form, this is by design. To make the changes permanent, you have to pass the \u201c-i\u201d option in this manner: sed -i \u2018s/black/red/` myfile.txt Now when you open the file, you will see that the color \"black\" has been substituted out for \"red\". Note : It is not advised to use the \u201c-i\u201d option casually because doing so could cause you to permanently lose your data. Use it only when you are certain you want to make irreversible changes. Save changes to a new file If however you want the old file unaltered but want to save your edits to a new file, enter this: sed \u2018s/box/bag/g\u2019 myfile.txt > secondfile.txt The greater-than(>) sign directs the computer to save the changes from myfile.txt to the file secondfile.txt , which is automatically created if it did not exist before. So when you open secondfile.txt , you'll see the following: Make a backup You can also pass a command that tells the computer to permanently edit a file but keep a backup of the original document. To do this, you type out a variation of the \u201c-i\u201d option which is the \u201c-i.bak\u201d option. It is used like this: sed -i.bak \u2018s/box/bag/g\u2019 myfile.txt The above lets you make permanent changes but creates a backup of the original file with a \u201c.bak\u201d extension. So the backup created from the command above will be \"myfile.txt.bak\". We can see that myfile.txt is permanently altered and myfile.txt.bak contains its original content Conclusion Now you know the different ways of using sed to make basic substitutions in text files in the command line, how to make multiple sed changes in one entry, and how to save your changes permanently.","title":"Tutorial"},{"location":"tut/#create-a-file","text":"First, open your Linux terminal and navigate to the home directory if you aren't already there. Create a file with the \"cat\" command in the same way as done below:","title":"Create a file"},{"location":"tut/#the-basic-syntax-of-sed","text":"The most common way in which you will use \"sed\" is this: sed \u2018s/old_word/new_word/\u2019 FILENAME You start with typing out \u201c sed \u201d which lets the computer know you want to access the stream editor tool, \u201cs\u201d is the search operator that looks through the file. Next, you enter the word you want to substitute out or replace which is the \u201cold_word\u201d, and then the word you want to substitute in which is the \u201cnew_word\u201d. Then enter the name of the target file (FILENAME). The forward slash(/) which separates each keyword is called a delimiter, more on this will be explained later. Now, following this syntax let's try it out on the file we created above, myfile.txt. sed \u2018s/box/bag/\u2019 myfile.txt When you click ENTER, you'll notice that all the first instances of the word \u201cbox\u201d on each line have been changed to \u201cbag\u201d. You'll also notice that even the word \"sandbox\" is affected and has been changed to \"sandbag\", this is because sed affects text patterns, not just specified words.","title":"The basic syntax of SED"},{"location":"tut/#substitute-specific-instances","text":"By default, only the first instance of the specified text is altered. If you want to change the order of the affected instance, you type in the following: sed \u2018s/box/bag/2\u2019 myfile.txt This ensures that on each line where \u201cbox\u201d appears, the first instance is left unaltered and only the second instance changes. You can replace the number \u201c2\u201d with any other number to indicate the particular instance on each line that you want to replace.","title":"Substitute specific instances"},{"location":"tut/#substitute-all-instances","text":"If you want all instances of the target word on every line to be replaced, enter: sed \u2018s/box/bag/g\u2019 myfile.txt The \u201cg\u201d operator tells the computer you want to replace the word \"box\" globally, that is, everywhere it occurs in the file.","title":"Substitute all instances"},{"location":"tut/#substitute-text-without-being-case-sensitive","text":"Suppose you want to find and replace a word in a way that does not return an error because of case-sensitivity issues. Perhaps the word occurs in capital letters at some point in the file. The \"i\" operator is used to resolve this issue and it works like this: sed \u2018s/BOX/bag/i\u2019 myfile.txt This will replace all instances of the word irrespective of the casing of the letters.","title":"Substitute text without being case-sensitive"},{"location":"tut/#substitute-text-on-specific-lines","text":"To find and replace a text pattern on a specific line instead of all the lines, use the following command: sed \u20183 s/box/bag/\u2019 myfile.txt In the image above, you will see that only the first instance of \"box\" on the third line has been substituted out. Placing the number \"3\" before \u201cs\u201d tells the computer that in myfile.txt we want to find and replace the word \"box\" in the third line only. You can change the number to the number of the line where you want your substitution made. Note : If you have a large file, to display the line numbers, enter this command: sed = myfile.txt","title":"Substitute text on specific lines"},{"location":"tut/#substitute-text-in-a-range-of-lines","text":"To find and replace text in a range of lines: sed \u20181,3 s/box/bag/\u2019 myfile.txt The first number is followed by the second number and a comma separates them, this lets the computer know that you want your sed substitutions made within that range of lines. In this case that is within the range of line 1 to line 3.","title":"Substitute text in a range of lines"},{"location":"tut/#make-multiple-sed-substitutions","text":"If you want to use the sed command multiple times on the same text file, there are various ways for you to do this in one entry in the Linux terminal. To substitute both the words \"box\" and \"black\" with the words \"bag\" and \"red\" respectively in the text file we created, myfile.txt , we can use any of the following methods: i. Use pipe (|) sed \u2018s/box/bag/\u2019 myfile.txt | sed \u2018s/black/red/\u2019 Remember, sed can take in output gotten from a previous command and perform some operation on it. In the above scenario, we have piped in output gotten from a previous sed command to let us substitute another text in the same file. This lets us make multiple SED substitutions at once. ii. Use the \u201c-e\u201d option sed -e \u2018s/box/bag/\u2019 -e \u2018s/black/red/\u2019 myfile.txt \u201c-e\u201d is an option provided by sed that makes it convenient to make multiple substitutions without needing to call out sed each time. You place it right before each command, and it can be used several times. iii. Use the semicolon(;) sed \u2018s/box/bag/;s/black/red/\u2019 song.txt The semicolon lets you join all the multiple substitution commands you want to make into one without needing to split them into different groups like the \u201c-e\u201d option requires. It is by far the most convenient, but the -e option will be better in certain situations.","title":"Make Multiple SED substitutions"},{"location":"tut/#print-out-only-edited-lines","text":"To print out only the lines that you have worked on, perhaps it is a really large file and you want to isolate the lines you have altered with sed , you enter the following command: sed -n \u2018s/box/bag/p\u2019 myfile.txt \u201c-n\u201d is an option that suppresses automatic printing, while the \u201cp\u201d operator causes double printing of the edited lines. The combination of these two will output the edited lines only.","title":"Print out only edited lines"},{"location":"tut/#delimiters","text":"We've been using the forward-slash(/) as a delimiter to separate the relevant categories of our substitution command in the terminal, but sometimes there will be situations where this will not work. For example, if you're trying to use SED on a URL, the URL already has forward slashes (/) and this will cause an error to occur if you try to use a forward-slash(/) as a delimiter. Fortunately, other special characters can be used as delimiters too. Example: echo \u201chttps://www.wikipedia.org/homepage.html\u201d | sed \u2018s$org/homepage$inc/search$\u2019 Here we use a dollar-sign($) as a delimiter to separate the text we want to substitute out \"org/homepage\" and the one we want to substitute in \"inc/search\". If we had tried using the forward-slash(/) as a delimiter, it would have returned an error.","title":"Delimiters"},{"location":"tut/#save-changes","text":"At this point, you may have noticed that all the changes we've been making with sed are temporary, not permanent. The myfile.txt file when opened with the cat command is still in its original form, this is by design. To make the changes permanent, you have to pass the \u201c-i\u201d option in this manner: sed -i \u2018s/black/red/` myfile.txt Now when you open the file, you will see that the color \"black\" has been substituted out for \"red\". Note : It is not advised to use the \u201c-i\u201d option casually because doing so could cause you to permanently lose your data. Use it only when you are certain you want to make irreversible changes.","title":"Save changes"},{"location":"tut/#save-changes-to-a-new-file","text":"If however you want the old file unaltered but want to save your edits to a new file, enter this: sed \u2018s/box/bag/g\u2019 myfile.txt > secondfile.txt The greater-than(>) sign directs the computer to save the changes from myfile.txt to the file secondfile.txt , which is automatically created if it did not exist before. So when you open secondfile.txt , you'll see the following:","title":"Save changes to a new file"},{"location":"tut/#make-a-backup","text":"You can also pass a command that tells the computer to permanently edit a file but keep a backup of the original document. To do this, you type out a variation of the \u201c-i\u201d option which is the \u201c-i.bak\u201d option. It is used like this: sed -i.bak \u2018s/box/bag/g\u2019 myfile.txt The above lets you make permanent changes but creates a backup of the original file with a \u201c.bak\u201d extension. So the backup created from the command above will be \"myfile.txt.bak\". We can see that myfile.txt is permanently altered and myfile.txt.bak contains its original content","title":"Make a backup"},{"location":"tut/#conclusion","text":"Now you know the different ways of using sed to make basic substitutions in text files in the command line, how to make multiple sed changes in one entry, and how to save your changes permanently.","title":"Conclusion"}]}