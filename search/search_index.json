{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"home/","text":"Welcome Hello there! Welcome to my portfolio page. This is a static website created using markdown and hosted on github pages. Skills Below is a list of my technical skills Mkdocs Technical Writing Linux Contact me Twitter Email: marnuel.et@gmail.com My Resume [Resume] GitHub profile","title":"Welcome page"},{"location":"home/#welcome","text":"Hello there! Welcome to my portfolio page. This is a static website created using markdown and hosted on github pages.","title":"Welcome"},{"location":"home/#skills","text":"Below is a list of my technical skills Mkdocs Technical Writing Linux","title":"Skills"},{"location":"home/#contact-me","text":"Twitter Email: marnuel.et@gmail.com","title":"Contact me"},{"location":"home/#my-resume","text":"[Resume] GitHub profile","title":"My Resume"},{"location":"sed/","text":"Text Substitution with SED Introduction sed is a powerful tool that can be used in the Linux terminal to edit text documents without opening them first. The word \"sed\" is a contraction of the phrase \"stream editor\", it is esssentially a tool for editing streams of text. sed takes in text from a file or text received as the output of another command and lets you perform some operations on it. In this tutorial, I will demonstrate how sed can be used to make basic substitutions in text files. Create a file First, open your Linux terminal and navigate to the home directory if you aren't already there. Create a file with the \"cat\" command in the same way as done below: The basic syntax of SED The most common way in which you will use \"sed\" is this: sed \u2018s/old_word/new_word/\u2019 FILENAME You start with typing out \u201c sed \u201d which lets the computer know you want to access the stream editor tool, \u201cs\u201d is the search operator that looks through the file. Next, you enter the word you want to substitute out or replace which is the \u201cold_word\u201d, and then the word you want to substitute in which is the \u201cnew_word\u201d. Then enter the name of the target file (FILENAME). The forward slash(/) which separates each keyword is called a delimiter, more on this will be explained later. Now, following this syntax let's try it out on the file we created above, myfile.txt. sed \u2018s/box/bag/\u2019 myfile.txt When you click ENTER, you'll notice that all the first instances of the word \u201cbox\u201d on each line have been changed to \u201cbag\u201d. You'll also notice that even the word \"sandbox\" is affected and has been changed to \"sandbag\", this is because sed affects text patterns, not just specified words. Substitute specific instances By default, only the first instance of the specified text is altered. If you want to change the order of the affected instance, you type in the following: sed \u2018s/box/bag/2\u2019 myfile.txt This ensures that on each line where \u201cbox\u201d appears, the first instance is left unaltered and only the second instance changes. You can replace the number \u201c2\u201d with any other number to indicate the particular instance on each line that you want to replace. Substitute all instances If you want all instances of the target word on every line to be replaced, enter: sed \u2018s/box/bag/g\u2019 myfile.txt The \u201cg\u201d operator tells the computer you want to replace the word \"box\" globally, that is, everywhere it occurs in the file. Substitute text without being case-sensitive Suppose you want to find and replace a word in a way that does not return an error because of case-sensitivity issues. Perhaps the word occurs in capital letters at some point in the file. The \"i\" operator is used to resolve this issue and it works like this: sed \u2018s/BOX/bag/i\u2019 myfile.txt This will replace all instances of the word irrespective of the casing of the letters. Substitute text on specific lines To find and replace a text pattern on a specific line instead of all the lines, use the following command: sed \u20183 s/box/bag/\u2019 myfile.txt In the image above, you will see that only the first instance of \"box\" on the third line has been substituted out. Placing the number \"3\" before \u201cs\u201d tells the computer that in myfile.txt we want to find and replace the word \"box\" in the third line only. You can change the number to the number of the line where you want your substitution made. Note : If you have a large file, to display the line numbers, enter this command: sed = myfile.txt Substitute text in a range of lines To find and replace text in a range of lines: sed \u20181,3 s/box/bag/\u2019 myfile.txt The first number is followed by the second number and a comma separates them, this lets the computer know that you want your sed substitutions made within that range of lines. In this case that is within the range of line 1 to line 3. Make Multiple SED substitutions If you want to use the sed command multiple times on the same text file, there are various ways for you to do this in one entry in the Linux terminal. To substitute both the words \"box\" and \"black\" with the words \"bag\" and \"red\" respectively in the text file we created, myfile.txt , we can use any of the following methods: i. Use pipe (|) sed \u2018s/box/bag/\u2019 myfile.txt | sed \u2018s/black/red/\u2019 Remember, sed can take in output gotten from a previous command and perform some operation on it. In the above scenario, we have piped in output gotten from a previous sed command to let us substitute another text in the same file. This lets us make multiple SED substitutions at once. ii. Use the \u201c-e\u201d option sed -e \u2018s/box/bag/\u2019 -e \u2018s/black/red/\u2019 myfile.txt \u201c-e\u201d is an option provided by sed that makes it convenient to make multiple substitutions without needing to call out sed each time. You place it right before each command, and it can be used several times. iii. Use the semicolon(;) sed \u2018s/box/bag/;s/black/red/\u2019 song.txt The semicolon lets you join all the multiple substitution commands you want to make into one without needing to split them into different groups like the \u201c-e\u201d option requires. It is by far the most convenient, but the -e option will be better in certain situations. Print out only edited lines To print out only the lines that you have worked on, perhaps it is a really large file and you want to isolate the lines you have altered with sed , you enter the following command: sed -n \u2018s/box/bag/p\u2019 myfile.txt \u201c-n\u201d is an option that suppresses automatic printing, while the \u201cp\u201d operator causes double printing of the edited lines. The combination of these two will output the edited lines only. Delimiters We've been using the forward-slash(/) as a delimiter to separate the relevant categories of our substitution command in the terminal, but sometimes there will be situations where this will not work. For example, if you're trying to use SED on a URL, the URL already has forward slashes (/) and this will cause an error to occur if you try to use a forward-slash(/) as a delimiter. Fortunately, other special characters can be used as delimiters too. Example: echo \u201chttps://www.wikipedia.org/homepage.html\u201d | sed \u2018s$org/homepage$inc/search$\u2019 Here we use a dollar-sign($) as a delimiter to separate the text we want to substitute out \"org/homepage\" and the one we want to substitute in \"inc/search\". If we had tried using the forward-slash(/) as a delimiter, it would have returned an error. Save changes At this point, you may have noticed that all the changes we've been making with sed are temporary, not permanent. The myfile.txt file when opened with the cat command is still in its original form, this is by design. To make the changes permanent, you have to pass the \u201c-i\u201d option in this manner: sed -i \u2018s/black/red/` myfile.txt Now when you open the file, you will see that the color \"black\" has been substituted out for \"red\". Note : It is not advised to use the \u201c-i\u201d option casually because doing so could cause you to permanently lose your data. Use it only when you are certain you want to make irreversible changes. Save changes to a new file If however you want the old file unaltered but want to save your edits to a new file, enter this: sed \u2018s/box/bag/g\u2019 myfile.txt > secondfile.txt The greater-than(>) sign directs the computer to save the changes from myfile.txt to the file secondfile.txt , which is automatically created if it did not exist before. So when you open secondfile.txt , you'll see the following: Make a backup You can also pass a command that tells the computer to permanently edit a file but keep a backup of the original document. To do this, you type out a variation of the \u201c-i\u201d option which is the \u201c-i.bak\u201d option. It is used like this: sed -i.bak \u2018s/box/bag/g\u2019 myfile.txt The above lets you make permanent changes but creates a backup of the original file with a \u201c.bak\u201d extension. So the backup created from the command above will be \"myfile.txt.bak\". We can see that myfile.txt is permanently altered and myfile.txt.bak contains its original content Conclusion Now you know the different ways of using sed to make basic substitutions in text files in the command line, how to make multiple sed changes in one entry, and how to save your changes permanently.","title":"Text Substitution with SED"},{"location":"sed/#text-substitution-with-sed","text":"","title":"Text Substitution with SED"},{"location":"sed/#introduction","text":"sed is a powerful tool that can be used in the Linux terminal to edit text documents without opening them first. The word \"sed\" is a contraction of the phrase \"stream editor\", it is esssentially a tool for editing streams of text. sed takes in text from a file or text received as the output of another command and lets you perform some operations on it. In this tutorial, I will demonstrate how sed can be used to make basic substitutions in text files.","title":"Introduction"},{"location":"sed/#create-a-file","text":"First, open your Linux terminal and navigate to the home directory if you aren't already there. Create a file with the \"cat\" command in the same way as done below:","title":"Create a file"},{"location":"sed/#the-basic-syntax-of-sed","text":"The most common way in which you will use \"sed\" is this: sed \u2018s/old_word/new_word/\u2019 FILENAME You start with typing out \u201c sed \u201d which lets the computer know you want to access the stream editor tool, \u201cs\u201d is the search operator that looks through the file. Next, you enter the word you want to substitute out or replace which is the \u201cold_word\u201d, and then the word you want to substitute in which is the \u201cnew_word\u201d. Then enter the name of the target file (FILENAME). The forward slash(/) which separates each keyword is called a delimiter, more on this will be explained later. Now, following this syntax let's try it out on the file we created above, myfile.txt. sed \u2018s/box/bag/\u2019 myfile.txt When you click ENTER, you'll notice that all the first instances of the word \u201cbox\u201d on each line have been changed to \u201cbag\u201d. You'll also notice that even the word \"sandbox\" is affected and has been changed to \"sandbag\", this is because sed affects text patterns, not just specified words.","title":"The basic syntax of SED"},{"location":"sed/#substitute-specific-instances","text":"By default, only the first instance of the specified text is altered. If you want to change the order of the affected instance, you type in the following: sed \u2018s/box/bag/2\u2019 myfile.txt This ensures that on each line where \u201cbox\u201d appears, the first instance is left unaltered and only the second instance changes. You can replace the number \u201c2\u201d with any other number to indicate the particular instance on each line that you want to replace.","title":"Substitute specific instances"},{"location":"sed/#substitute-all-instances","text":"If you want all instances of the target word on every line to be replaced, enter: sed \u2018s/box/bag/g\u2019 myfile.txt The \u201cg\u201d operator tells the computer you want to replace the word \"box\" globally, that is, everywhere it occurs in the file.","title":"Substitute all instances"},{"location":"sed/#substitute-text-without-being-case-sensitive","text":"Suppose you want to find and replace a word in a way that does not return an error because of case-sensitivity issues. Perhaps the word occurs in capital letters at some point in the file. The \"i\" operator is used to resolve this issue and it works like this: sed \u2018s/BOX/bag/i\u2019 myfile.txt This will replace all instances of the word irrespective of the casing of the letters.","title":"Substitute text without being case-sensitive"},{"location":"sed/#substitute-text-on-specific-lines","text":"To find and replace a text pattern on a specific line instead of all the lines, use the following command: sed \u20183 s/box/bag/\u2019 myfile.txt In the image above, you will see that only the first instance of \"box\" on the third line has been substituted out. Placing the number \"3\" before \u201cs\u201d tells the computer that in myfile.txt we want to find and replace the word \"box\" in the third line only. You can change the number to the number of the line where you want your substitution made. Note : If you have a large file, to display the line numbers, enter this command: sed = myfile.txt","title":"Substitute text on specific lines"},{"location":"sed/#substitute-text-in-a-range-of-lines","text":"To find and replace text in a range of lines: sed \u20181,3 s/box/bag/\u2019 myfile.txt The first number is followed by the second number and a comma separates them, this lets the computer know that you want your sed substitutions made within that range of lines. In this case that is within the range of line 1 to line 3.","title":"Substitute text in a range of lines"},{"location":"sed/#make-multiple-sed-substitutions","text":"If you want to use the sed command multiple times on the same text file, there are various ways for you to do this in one entry in the Linux terminal. To substitute both the words \"box\" and \"black\" with the words \"bag\" and \"red\" respectively in the text file we created, myfile.txt , we can use any of the following methods: i. Use pipe (|) sed \u2018s/box/bag/\u2019 myfile.txt | sed \u2018s/black/red/\u2019 Remember, sed can take in output gotten from a previous command and perform some operation on it. In the above scenario, we have piped in output gotten from a previous sed command to let us substitute another text in the same file. This lets us make multiple SED substitutions at once. ii. Use the \u201c-e\u201d option sed -e \u2018s/box/bag/\u2019 -e \u2018s/black/red/\u2019 myfile.txt \u201c-e\u201d is an option provided by sed that makes it convenient to make multiple substitutions without needing to call out sed each time. You place it right before each command, and it can be used several times. iii. Use the semicolon(;) sed \u2018s/box/bag/;s/black/red/\u2019 song.txt The semicolon lets you join all the multiple substitution commands you want to make into one without needing to split them into different groups like the \u201c-e\u201d option requires. It is by far the most convenient, but the -e option will be better in certain situations.","title":"Make Multiple SED substitutions"},{"location":"sed/#print-out-only-edited-lines","text":"To print out only the lines that you have worked on, perhaps it is a really large file and you want to isolate the lines you have altered with sed , you enter the following command: sed -n \u2018s/box/bag/p\u2019 myfile.txt \u201c-n\u201d is an option that suppresses automatic printing, while the \u201cp\u201d operator causes double printing of the edited lines. The combination of these two will output the edited lines only.","title":"Print out only edited lines"},{"location":"sed/#delimiters","text":"We've been using the forward-slash(/) as a delimiter to separate the relevant categories of our substitution command in the terminal, but sometimes there will be situations where this will not work. For example, if you're trying to use SED on a URL, the URL already has forward slashes (/) and this will cause an error to occur if you try to use a forward-slash(/) as a delimiter. Fortunately, other special characters can be used as delimiters too. Example: echo \u201chttps://www.wikipedia.org/homepage.html\u201d | sed \u2018s$org/homepage$inc/search$\u2019 Here we use a dollar-sign($) as a delimiter to separate the text we want to substitute out \"org/homepage\" and the one we want to substitute in \"inc/search\". If we had tried using the forward-slash(/) as a delimiter, it would have returned an error.","title":"Delimiters"},{"location":"sed/#save-changes","text":"At this point, you may have noticed that all the changes we've been making with sed are temporary, not permanent. The myfile.txt file when opened with the cat command is still in its original form, this is by design. To make the changes permanent, you have to pass the \u201c-i\u201d option in this manner: sed -i \u2018s/black/red/` myfile.txt Now when you open the file, you will see that the color \"black\" has been substituted out for \"red\". Note : It is not advised to use the \u201c-i\u201d option casually because doing so could cause you to permanently lose your data. Use it only when you are certain you want to make irreversible changes.","title":"Save changes"},{"location":"sed/#save-changes-to-a-new-file","text":"If however you want the old file unaltered but want to save your edits to a new file, enter this: sed \u2018s/box/bag/g\u2019 myfile.txt > secondfile.txt The greater-than(>) sign directs the computer to save the changes from myfile.txt to the file secondfile.txt , which is automatically created if it did not exist before. So when you open secondfile.txt , you'll see the following:","title":"Save changes to a new file"},{"location":"sed/#make-a-backup","text":"You can also pass a command that tells the computer to permanently edit a file but keep a backup of the original document. To do this, you type out a variation of the \u201c-i\u201d option which is the \u201c-i.bak\u201d option. It is used like this: sed -i.bak \u2018s/box/bag/g\u2019 myfile.txt The above lets you make permanent changes but creates a backup of the original file with a \u201c.bak\u201d extension. So the backup created from the command above will be \"myfile.txt.bak\". We can see that myfile.txt is permanently altered and myfile.txt.bak contains its original content","title":"Make a backup"},{"location":"sed/#conclusion","text":"Now you know the different ways of using sed to make basic substitutions in text files in the command line, how to make multiple sed changes in one entry, and how to save your changes permanently.","title":"Conclusion"},{"location":"storage/","text":"Understanding Block Storage and Object Storage Introduction In the world of IT, there are different storage solutions available to satisfy the different storage needs businesses will have for their data. Let us look at two popular storage solutions, Block Storage and Object Storage, go over their strengths and weaknesses, and see how they compare to each other. Block Storage Block storage is a traditional storage format wherein data is broken up into pieces and stored inside blocks of fixed equal sizes. These blocks come with unique identifiers and very limited metadata. The unique identifiers are important because they allow for the blocks to be stored across multiple physical storage devices in a network instead of storing them in just one device. They also make it possible for the blocks to be easily tracked and reassembled when a user wants to access that data. The software used to provision, divide, and track these blocks (i.e., the software used to manage this storage format) is typically completely separate from the physical storage device(s). These software tools are referred to as block storage management tools. Some examples are: Amazon Elastic Block Store (EBS) DigitalOcean Serverspace Vultr Upcloud Block storage volumes can be attached to a system locally, connected over a SAN (Storage Area Network) or utilized in a cloud environment. Communication between the system and the block storage device is usually done via storage protocols like FC (Fibre Channel), FCoE (Fibre Channel over Ethernet), iSCSI (Internet Small Computers System Interface), etc. Block storage volumes provisioned remotely are like individual hard drives and are usually accessed at the OS level. A block storage volume in a cloud environment will typically be decoupled from its server, and this key feature allows you to shut down a server and still retain the data in its storage volume which can then be reattached to another server, all the while incurring zero data loss. Block storage does not come with built-in resiliency measures but this can be solved by using erasure coding, RAID, etc., to achieve data redundancy, increased performance and other benefits. These measures can be deployed generally or specifically for mission-critical workloads. Advantages of Block Storage Block storage volumes are flexible. This means they can be configured to serve a variety of business needs. You can format it with a file system like FAT32, EXT 3, EXT 4, and NTFS. You can set up a database to write straight to your block storage device. You can connect multiple block storage devices to achieve a RAID (Redundant Array of Independent Disks) volume. Boot volumes are block volumes that have been configured to boot an OS for the server they are attached to and this is a very important feature in the cloud space. Block storage is known for providing consistently high IOPS (Input/Output per Second). Data delivery with reliable low latency is a strength of block storage. However, a factor that can affect this is the distance between the block storage volume and the application using it, with greater distances leading to higher latency. With block storage, you can make edits to specific data blocks without having to re-upload the entire data file. It also allows for simple management of access privileges. Disadvantages of Block Storage Block storage is a relatively more costly form of storage, this is because it demands significant investment upfront along with a highly skilled maintenance staff. While block storage is highly scalable, when it begins to scale to terabytes and beyond, its complexity increases making it harder to locate a specific data file. Block storage\u2019s limited metadata capabilities make it impossible to perform advanced search operations. Use cases for Block Storage Transactional databases and relational databases in general require low latency, high IOPs data delivery and the ability to perform incremental updates to data files. Block storage excels in these areas. Mission-critical workloads are often run with block storage because of its high performance and swifty data delivery. Virtual machines require boot volumes and general block storage volumes to be able to function. Block storage volumes can be organized into RAID volumes. Block storage is necessary for programs that need server-side processing such as .NET, Java, etc. Block storage is very instrumental when working with containers because block volumes allow you to preserve a container's data beyond the container\u2019s typical lifespan. Object Storage Object storage is a more recent form of data storage that rose to popularity in the early 2000s because of how well it helped enterprises around the world to store and manage the voluminous amounts of unstructured data that was being generated due to the growing internet. Trillions of data units in various formats are generated each year and around 80% of the data on the internet is unstructured. With object storage, each data file is stored fully inside a distinct object, and these objects, which could number in the millions or even billions, are organized in a flat-file structure (as opposed to a hierarchy) and stored in a single-level repository. The abstraction of some of the lower levels of storage is one of the core tenets of object storage. Lower-level storage tasks like creating and managing storage volumes to make the most of disk space or configuring RAID levels to handle disk failure no longer need to be carried out. As a result, rather than as blocks, data is accessed and controlled as objects. An object typically contains: A particular data file. Metadata which provides the necessary information about the data file in the object. A Globally Unique Identifier (GUID) Attributes: these provide information about the object itself, information about which users can download the object, delete the object, etc. A key function of object storage is its customizable metadata, there is no limit to the amount or nature of contextual information about the data that can be added to it. The size of the metadata of a data file can even be larger than the size of the data file itself. This then allows for a more thorough classification and management of the data files which proves important when advanced search and analytics operations need to be undertaken. The objects are usually accessed via an API (Application Programming Interface) or directly by HTTP(S), they are tracked down by their GUIDs and the data delivery is done by TCP/IP. This ensures that the ease of accessing individual data files remains relatively the same irrespective of the scale of the entire storage space. And object storage is highly scalable, you could scale your storage up to even petabytes and beyond while still maintaining data integrity. You can scale out simply by adding more nodes to your storage cluster and will usually only be required to pay for the storage space you need. Object storage has inbuilt resiliency measures to protect your data. Data stored in objects are replicated multiple times and stored across several storage devices, so your data will always be accessible to you even if there is a fault with one or even several of these storage devices. In case of corruption of one object, you can simply access one of the separately stored copies. This ensures high availability of your data. You can also enable object versioning which is a feature that lets you have many different versions of your data. In the case of accidental deletions or updates, you can simply access the previous versions. But under normal circumstances, the most important version to your business or project will be the latest version. Advantages of Object Storage It provides limitless scalability. Its flat-file structure allows for easy and quick retrieval of data. Its powerful metadata capabilities allow for extensive and detailed search and analytics operations. It comes with inbuilt resiliency protocols to ensure high availability of data. Object storage is more cost-effective than the other storage solutions on the market. Object storage has the added benefit of abstracting away the maintenance of the underlying physical storage devices. Object storage allows for versioning. Disadvantages of Object Storage Objects in object storage are immutable, meaning if you try to make changes to a data file in an object, you would have to re-upload the new file with its changes in a new object, as such it is terrible for storing data that would require consistent updates. Its performance is relatively slower than other storage solutions, this is why it is used mostly for cold storage. Object storage cannot be accessed directly at the OS level without significant degradation in performance. Use cases for Object Storage Object storage is extremely useful in the field of big data analytics, this is due to its high scalability and limitless metadata functions. IoT (Internet of Things); object storage is extremely useful for storing and archiving the enormous amounts of unstructured data generated by IoT devices. Object storage makes it easy to store, scale and manage your image files, audio files and other forms of media files with relative ease. It is a popular choice among social media companies, file-sharing sites and streaming services for this very reason. It's extremely useful in disaster recovery plans, this is owing to its inbuilt resiliency protocols. It\u2019s a safe and cost-effective option for storing backups and archived files that will be accessed infrequently. In essence, it\u2019s a great choice for cold storage. Most object storage services can also deliver data to your users publicly, and this is why it makes for a great choice when looking to host static websites. Block Storage vs Object Storage Now let\u2019s examine some of the key distinctions between block storage and object storage: Block Storage Object Storage Its metadata capabilities are limited. Its metadata can be customized extensively. It can only safely scale up to a certain point. It offers limitless scalability while still retaining accessibility. It is more costly. It is more cost effective. It performs best with operations requiring high IOPS and low latency like relational database storage. It performs best with large volumes of unstructured data. It can be accessed at the OS level. It cannot be accessed at the OS level without a significant drop in performance. Block storage requires management and configuration of its volumes. With object storage the management process is abstracted away. The distance between the storage location and the application accessing it can affect latency. The data can be stored across a wide range of locations with no effect on latency. Data is broken up into raw blocks and stored in a hierarchical order. Data is stored whole inside distinct objects organized in a flat-file order. It allows for incremental edits to files. Making changes to files in an object would require the creation of a new object. Conclusion Both block storage and object storage have distinct benefits and drawbacks. You can only make the best storage decisions for your business if you\u2019re well informed on the potential uses and associated costs for each of the discussed storage solutions.","title":"Understanding Block Storage and Object Storage"},{"location":"storage/#understanding-block-storage-and-object-storage","text":"","title":"Understanding Block Storage and Object Storage"},{"location":"storage/#introduction","text":"In the world of IT, there are different storage solutions available to satisfy the different storage needs businesses will have for their data. Let us look at two popular storage solutions, Block Storage and Object Storage, go over their strengths and weaknesses, and see how they compare to each other.","title":"Introduction"},{"location":"storage/#block-storage","text":"Block storage is a traditional storage format wherein data is broken up into pieces and stored inside blocks of fixed equal sizes. These blocks come with unique identifiers and very limited metadata. The unique identifiers are important because they allow for the blocks to be stored across multiple physical storage devices in a network instead of storing them in just one device. They also make it possible for the blocks to be easily tracked and reassembled when a user wants to access that data. The software used to provision, divide, and track these blocks (i.e., the software used to manage this storage format) is typically completely separate from the physical storage device(s). These software tools are referred to as block storage management tools. Some examples are: Amazon Elastic Block Store (EBS) DigitalOcean Serverspace Vultr Upcloud Block storage volumes can be attached to a system locally, connected over a SAN (Storage Area Network) or utilized in a cloud environment. Communication between the system and the block storage device is usually done via storage protocols like FC (Fibre Channel), FCoE (Fibre Channel over Ethernet), iSCSI (Internet Small Computers System Interface), etc. Block storage volumes provisioned remotely are like individual hard drives and are usually accessed at the OS level. A block storage volume in a cloud environment will typically be decoupled from its server, and this key feature allows you to shut down a server and still retain the data in its storage volume which can then be reattached to another server, all the while incurring zero data loss. Block storage does not come with built-in resiliency measures but this can be solved by using erasure coding, RAID, etc., to achieve data redundancy, increased performance and other benefits. These measures can be deployed generally or specifically for mission-critical workloads.","title":"Block Storage"},{"location":"storage/#advantages-of-block-storage","text":"Block storage volumes are flexible. This means they can be configured to serve a variety of business needs. You can format it with a file system like FAT32, EXT 3, EXT 4, and NTFS. You can set up a database to write straight to your block storage device. You can connect multiple block storage devices to achieve a RAID (Redundant Array of Independent Disks) volume. Boot volumes are block volumes that have been configured to boot an OS for the server they are attached to and this is a very important feature in the cloud space. Block storage is known for providing consistently high IOPS (Input/Output per Second). Data delivery with reliable low latency is a strength of block storage. However, a factor that can affect this is the distance between the block storage volume and the application using it, with greater distances leading to higher latency. With block storage, you can make edits to specific data blocks without having to re-upload the entire data file. It also allows for simple management of access privileges.","title":"Advantages of Block Storage"},{"location":"storage/#disadvantages-of-block-storage","text":"Block storage is a relatively more costly form of storage, this is because it demands significant investment upfront along with a highly skilled maintenance staff. While block storage is highly scalable, when it begins to scale to terabytes and beyond, its complexity increases making it harder to locate a specific data file. Block storage\u2019s limited metadata capabilities make it impossible to perform advanced search operations.","title":"Disadvantages of Block Storage"},{"location":"storage/#use-cases-for-block-storage","text":"Transactional databases and relational databases in general require low latency, high IOPs data delivery and the ability to perform incremental updates to data files. Block storage excels in these areas. Mission-critical workloads are often run with block storage because of its high performance and swifty data delivery. Virtual machines require boot volumes and general block storage volumes to be able to function. Block storage volumes can be organized into RAID volumes. Block storage is necessary for programs that need server-side processing such as .NET, Java, etc. Block storage is very instrumental when working with containers because block volumes allow you to preserve a container's data beyond the container\u2019s typical lifespan.","title":"Use cases for Block Storage"},{"location":"storage/#object-storage","text":"Object storage is a more recent form of data storage that rose to popularity in the early 2000s because of how well it helped enterprises around the world to store and manage the voluminous amounts of unstructured data that was being generated due to the growing internet. Trillions of data units in various formats are generated each year and around 80% of the data on the internet is unstructured. With object storage, each data file is stored fully inside a distinct object, and these objects, which could number in the millions or even billions, are organized in a flat-file structure (as opposed to a hierarchy) and stored in a single-level repository. The abstraction of some of the lower levels of storage is one of the core tenets of object storage. Lower-level storage tasks like creating and managing storage volumes to make the most of disk space or configuring RAID levels to handle disk failure no longer need to be carried out. As a result, rather than as blocks, data is accessed and controlled as objects. An object typically contains: A particular data file. Metadata which provides the necessary information about the data file in the object. A Globally Unique Identifier (GUID) Attributes: these provide information about the object itself, information about which users can download the object, delete the object, etc. A key function of object storage is its customizable metadata, there is no limit to the amount or nature of contextual information about the data that can be added to it. The size of the metadata of a data file can even be larger than the size of the data file itself. This then allows for a more thorough classification and management of the data files which proves important when advanced search and analytics operations need to be undertaken. The objects are usually accessed via an API (Application Programming Interface) or directly by HTTP(S), they are tracked down by their GUIDs and the data delivery is done by TCP/IP. This ensures that the ease of accessing individual data files remains relatively the same irrespective of the scale of the entire storage space. And object storage is highly scalable, you could scale your storage up to even petabytes and beyond while still maintaining data integrity. You can scale out simply by adding more nodes to your storage cluster and will usually only be required to pay for the storage space you need. Object storage has inbuilt resiliency measures to protect your data. Data stored in objects are replicated multiple times and stored across several storage devices, so your data will always be accessible to you even if there is a fault with one or even several of these storage devices. In case of corruption of one object, you can simply access one of the separately stored copies. This ensures high availability of your data. You can also enable object versioning which is a feature that lets you have many different versions of your data. In the case of accidental deletions or updates, you can simply access the previous versions. But under normal circumstances, the most important version to your business or project will be the latest version.","title":"Object Storage"},{"location":"storage/#advantages-of-object-storage","text":"It provides limitless scalability. Its flat-file structure allows for easy and quick retrieval of data. Its powerful metadata capabilities allow for extensive and detailed search and analytics operations. It comes with inbuilt resiliency protocols to ensure high availability of data. Object storage is more cost-effective than the other storage solutions on the market. Object storage has the added benefit of abstracting away the maintenance of the underlying physical storage devices. Object storage allows for versioning.","title":"Advantages of Object Storage"},{"location":"storage/#disadvantages-of-object-storage","text":"Objects in object storage are immutable, meaning if you try to make changes to a data file in an object, you would have to re-upload the new file with its changes in a new object, as such it is terrible for storing data that would require consistent updates. Its performance is relatively slower than other storage solutions, this is why it is used mostly for cold storage. Object storage cannot be accessed directly at the OS level without significant degradation in performance.","title":"Disadvantages of Object Storage"},{"location":"storage/#use-cases-for-object-storage","text":"Object storage is extremely useful in the field of big data analytics, this is due to its high scalability and limitless metadata functions. IoT (Internet of Things); object storage is extremely useful for storing and archiving the enormous amounts of unstructured data generated by IoT devices. Object storage makes it easy to store, scale and manage your image files, audio files and other forms of media files with relative ease. It is a popular choice among social media companies, file-sharing sites and streaming services for this very reason. It's extremely useful in disaster recovery plans, this is owing to its inbuilt resiliency protocols. It\u2019s a safe and cost-effective option for storing backups and archived files that will be accessed infrequently. In essence, it\u2019s a great choice for cold storage. Most object storage services can also deliver data to your users publicly, and this is why it makes for a great choice when looking to host static websites.","title":"Use cases for Object Storage"},{"location":"storage/#block-storage-vs-object-storage","text":"Now let\u2019s examine some of the key distinctions between block storage and object storage: Block Storage Object Storage Its metadata capabilities are limited. Its metadata can be customized extensively. It can only safely scale up to a certain point. It offers limitless scalability while still retaining accessibility. It is more costly. It is more cost effective. It performs best with operations requiring high IOPS and low latency like relational database storage. It performs best with large volumes of unstructured data. It can be accessed at the OS level. It cannot be accessed at the OS level without a significant drop in performance. Block storage requires management and configuration of its volumes. With object storage the management process is abstracted away. The distance between the storage location and the application accessing it can affect latency. The data can be stored across a wide range of locations with no effect on latency. Data is broken up into raw blocks and stored in a hierarchical order. Data is stored whole inside distinct objects organized in a flat-file order. It allows for incremental edits to files. Making changes to files in an object would require the creation of a new object.","title":"Block Storage vs Object Storage"},{"location":"storage/#conclusion","text":"Both block storage and object storage have distinct benefits and drawbacks. You can only make the best storage decisions for your business if you\u2019re well informed on the potential uses and associated costs for each of the discussed storage solutions.","title":"Conclusion"}]}